/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub type hb_bool_t = ::std::os::raw::c_int;
pub type hb_codepoint_t = u32;
pub type hb_position_t = i32;
pub type hb_mask_t = u32;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _hb_var_int_t {
    pub u32: __BindgenUnionField<u32>,
    pub i32: __BindgenUnionField<i32>,
    pub u16: __BindgenUnionField<[u16; 2usize]>,
    pub i16: __BindgenUnionField<[i16; 2usize]>,
    pub u8: __BindgenUnionField<[u8; 4usize]>,
    pub i8: __BindgenUnionField<[i8; 4usize]>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout__hb_var_int_t() {
    assert_eq!(::std::mem::size_of::<_hb_var_int_t>() , 4usize);
    assert_eq!(::std::mem::align_of::<_hb_var_int_t>() , 4usize);
}
impl Clone for _hb_var_int_t {
    fn clone(&self) -> Self { *self }
}
pub type hb_var_int_t = _hb_var_int_t;
pub type hb_tag_t = u32;
extern "C" {
    pub fn hb_tag_from_string(str: *const ::std::os::raw::c_char,
                              len: ::std::os::raw::c_int) -> hb_tag_t;
}
extern "C" {
    pub fn hb_tag_to_string(tag: hb_tag_t, buf: *mut ::std::os::raw::c_char);
}
pub const HB_DIRECTION_INVALID: _bindgen_ty_2 =
    _bindgen_ty_2::HB_DIRECTION_INVALID;
pub const HB_DIRECTION_LTR: _bindgen_ty_2 = _bindgen_ty_2::HB_DIRECTION_LTR;
pub const HB_DIRECTION_RTL: _bindgen_ty_2 = _bindgen_ty_2::HB_DIRECTION_RTL;
pub const HB_DIRECTION_TTB: _bindgen_ty_2 = _bindgen_ty_2::HB_DIRECTION_TTB;
pub const HB_DIRECTION_BTT: _bindgen_ty_2 = _bindgen_ty_2::HB_DIRECTION_BTT;
#[repr(u32)]
/**
 * hb_direction_t:
 * @HB_DIRECTION_INVALID: Initial, unset direction.
 * @HB_DIRECTION_LTR: Text is set horizontally from left to right.
 * @HB_DIRECTION_RTL: Text is set horizontally from right to left.
 * @HB_DIRECTION_TTB: Text is set vertically from top to bottom.
 * @HB_DIRECTION_BTT: Text is set vertically from bottom to top.
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_2 {
    HB_DIRECTION_INVALID = 0,
    HB_DIRECTION_LTR = 4,
    HB_DIRECTION_RTL = 5,
    HB_DIRECTION_TTB = 6,
    HB_DIRECTION_BTT = 7,
}
pub use self::_bindgen_ty_2 as hb_direction_t;
extern "C" {
    pub fn hb_direction_from_string(str: *const ::std::os::raw::c_char,
                                    len: ::std::os::raw::c_int)
     -> hb_direction_t;
}
extern "C" {
    pub fn hb_direction_to_string(direction: hb_direction_t)
     -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hb_language_impl_t([u8; 0]);
pub type hb_language_t = *const hb_language_impl_t;
extern "C" {
    pub fn hb_language_from_string(str: *const ::std::os::raw::c_char,
                                   len: ::std::os::raw::c_int)
     -> hb_language_t;
}
extern "C" {
    pub fn hb_language_to_string(language: hb_language_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn hb_language_get_default() -> hb_language_t;
}
pub const HB_SCRIPT_COMMON: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_COMMON;
pub const HB_SCRIPT_INHERITED: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_INHERITED;
pub const HB_SCRIPT_UNKNOWN: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_UNKNOWN;
pub const HB_SCRIPT_ARABIC: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_ARABIC;
pub const HB_SCRIPT_ARMENIAN: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_ARMENIAN;
pub const HB_SCRIPT_BENGALI: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_BENGALI;
pub const HB_SCRIPT_CYRILLIC: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_CYRILLIC;
pub const HB_SCRIPT_DEVANAGARI: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_DEVANAGARI;
pub const HB_SCRIPT_GEORGIAN: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_GEORGIAN;
pub const HB_SCRIPT_GREEK: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_GREEK;
pub const HB_SCRIPT_GUJARATI: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_GUJARATI;
pub const HB_SCRIPT_GURMUKHI: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_GURMUKHI;
pub const HB_SCRIPT_HANGUL: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_HANGUL;
pub const HB_SCRIPT_HAN: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_HAN;
pub const HB_SCRIPT_HEBREW: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_HEBREW;
pub const HB_SCRIPT_HIRAGANA: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_HIRAGANA;
pub const HB_SCRIPT_KANNADA: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_KANNADA;
pub const HB_SCRIPT_KATAKANA: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_KATAKANA;
pub const HB_SCRIPT_LAO: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_LAO;
pub const HB_SCRIPT_LATIN: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_LATIN;
pub const HB_SCRIPT_MALAYALAM: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_MALAYALAM;
pub const HB_SCRIPT_ORIYA: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_ORIYA;
pub const HB_SCRIPT_TAMIL: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_TAMIL;
pub const HB_SCRIPT_TELUGU: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_TELUGU;
pub const HB_SCRIPT_THAI: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_THAI;
pub const HB_SCRIPT_TIBETAN: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_TIBETAN;
pub const HB_SCRIPT_BOPOMOFO: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_BOPOMOFO;
pub const HB_SCRIPT_BRAILLE: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_BRAILLE;
pub const HB_SCRIPT_CANADIAN_SYLLABICS: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_CANADIAN_SYLLABICS;
pub const HB_SCRIPT_CHEROKEE: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_CHEROKEE;
pub const HB_SCRIPT_ETHIOPIC: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_ETHIOPIC;
pub const HB_SCRIPT_KHMER: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_KHMER;
pub const HB_SCRIPT_MONGOLIAN: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_MONGOLIAN;
pub const HB_SCRIPT_MYANMAR: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_MYANMAR;
pub const HB_SCRIPT_OGHAM: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_OGHAM;
pub const HB_SCRIPT_RUNIC: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_RUNIC;
pub const HB_SCRIPT_SINHALA: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_SINHALA;
pub const HB_SCRIPT_SYRIAC: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_SYRIAC;
pub const HB_SCRIPT_THAANA: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_THAANA;
pub const HB_SCRIPT_YI: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_YI;
pub const HB_SCRIPT_DESERET: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_DESERET;
pub const HB_SCRIPT_GOTHIC: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_GOTHIC;
pub const HB_SCRIPT_OLD_ITALIC: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_OLD_ITALIC;
pub const HB_SCRIPT_BUHID: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_BUHID;
pub const HB_SCRIPT_HANUNOO: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_HANUNOO;
pub const HB_SCRIPT_TAGALOG: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_TAGALOG;
pub const HB_SCRIPT_TAGBANWA: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_TAGBANWA;
pub const HB_SCRIPT_CYPRIOT: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_CYPRIOT;
pub const HB_SCRIPT_LIMBU: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_LIMBU;
pub const HB_SCRIPT_LINEAR_B: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_LINEAR_B;
pub const HB_SCRIPT_OSMANYA: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_OSMANYA;
pub const HB_SCRIPT_SHAVIAN: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_SHAVIAN;
pub const HB_SCRIPT_TAI_LE: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_TAI_LE;
pub const HB_SCRIPT_UGARITIC: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_UGARITIC;
pub const HB_SCRIPT_BUGINESE: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_BUGINESE;
pub const HB_SCRIPT_COPTIC: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_COPTIC;
pub const HB_SCRIPT_GLAGOLITIC: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_GLAGOLITIC;
pub const HB_SCRIPT_KHAROSHTHI: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_KHAROSHTHI;
pub const HB_SCRIPT_NEW_TAI_LUE: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_NEW_TAI_LUE;
pub const HB_SCRIPT_OLD_PERSIAN: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_OLD_PERSIAN;
pub const HB_SCRIPT_SYLOTI_NAGRI: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_SYLOTI_NAGRI;
pub const HB_SCRIPT_TIFINAGH: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_TIFINAGH;
pub const HB_SCRIPT_BALINESE: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_BALINESE;
pub const HB_SCRIPT_CUNEIFORM: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_CUNEIFORM;
pub const HB_SCRIPT_NKO: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_NKO;
pub const HB_SCRIPT_PHAGS_PA: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_PHAGS_PA;
pub const HB_SCRIPT_PHOENICIAN: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_PHOENICIAN;
pub const HB_SCRIPT_CARIAN: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_CARIAN;
pub const HB_SCRIPT_CHAM: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_CHAM;
pub const HB_SCRIPT_KAYAH_LI: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_KAYAH_LI;
pub const HB_SCRIPT_LEPCHA: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_LEPCHA;
pub const HB_SCRIPT_LYCIAN: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_LYCIAN;
pub const HB_SCRIPT_LYDIAN: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_LYDIAN;
pub const HB_SCRIPT_OL_CHIKI: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_OL_CHIKI;
pub const HB_SCRIPT_REJANG: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_REJANG;
pub const HB_SCRIPT_SAURASHTRA: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_SAURASHTRA;
pub const HB_SCRIPT_SUNDANESE: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_SUNDANESE;
pub const HB_SCRIPT_VAI: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_VAI;
pub const HB_SCRIPT_AVESTAN: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_AVESTAN;
pub const HB_SCRIPT_BAMUM: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_BAMUM;
pub const HB_SCRIPT_EGYPTIAN_HIEROGLYPHS: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_EGYPTIAN_HIEROGLYPHS;
pub const HB_SCRIPT_IMPERIAL_ARAMAIC: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_IMPERIAL_ARAMAIC;
pub const HB_SCRIPT_INSCRIPTIONAL_PAHLAVI: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_INSCRIPTIONAL_PAHLAVI;
pub const HB_SCRIPT_INSCRIPTIONAL_PARTHIAN: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_INSCRIPTIONAL_PARTHIAN;
pub const HB_SCRIPT_JAVANESE: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_JAVANESE;
pub const HB_SCRIPT_KAITHI: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_KAITHI;
pub const HB_SCRIPT_LISU: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_LISU;
pub const HB_SCRIPT_MEETEI_MAYEK: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_MEETEI_MAYEK;
pub const HB_SCRIPT_OLD_SOUTH_ARABIAN: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_OLD_SOUTH_ARABIAN;
pub const HB_SCRIPT_OLD_TURKIC: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_OLD_TURKIC;
pub const HB_SCRIPT_SAMARITAN: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_SAMARITAN;
pub const HB_SCRIPT_TAI_THAM: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_TAI_THAM;
pub const HB_SCRIPT_TAI_VIET: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_TAI_VIET;
pub const HB_SCRIPT_BATAK: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_BATAK;
pub const HB_SCRIPT_BRAHMI: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_BRAHMI;
pub const HB_SCRIPT_MANDAIC: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_MANDAIC;
pub const HB_SCRIPT_CHAKMA: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_CHAKMA;
pub const HB_SCRIPT_MEROITIC_CURSIVE: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_MEROITIC_CURSIVE;
pub const HB_SCRIPT_MEROITIC_HIEROGLYPHS: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_MEROITIC_HIEROGLYPHS;
pub const HB_SCRIPT_MIAO: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_MIAO;
pub const HB_SCRIPT_SHARADA: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_SHARADA;
pub const HB_SCRIPT_SORA_SOMPENG: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_SORA_SOMPENG;
pub const HB_SCRIPT_TAKRI: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_TAKRI;
pub const HB_SCRIPT_BASSA_VAH: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_BASSA_VAH;
pub const HB_SCRIPT_CAUCASIAN_ALBANIAN: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_CAUCASIAN_ALBANIAN;
pub const HB_SCRIPT_DUPLOYAN: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_DUPLOYAN;
pub const HB_SCRIPT_ELBASAN: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_ELBASAN;
pub const HB_SCRIPT_GRANTHA: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_GRANTHA;
pub const HB_SCRIPT_KHOJKI: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_KHOJKI;
pub const HB_SCRIPT_KHUDAWADI: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_KHUDAWADI;
pub const HB_SCRIPT_LINEAR_A: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_LINEAR_A;
pub const HB_SCRIPT_MAHAJANI: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_MAHAJANI;
pub const HB_SCRIPT_MANICHAEAN: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_MANICHAEAN;
pub const HB_SCRIPT_MENDE_KIKAKUI: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_MENDE_KIKAKUI;
pub const HB_SCRIPT_MODI: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_MODI;
pub const HB_SCRIPT_MRO: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_MRO;
pub const HB_SCRIPT_NABATAEAN: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_NABATAEAN;
pub const HB_SCRIPT_OLD_NORTH_ARABIAN: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_OLD_NORTH_ARABIAN;
pub const HB_SCRIPT_OLD_PERMIC: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_OLD_PERMIC;
pub const HB_SCRIPT_PAHAWH_HMONG: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_PAHAWH_HMONG;
pub const HB_SCRIPT_PALMYRENE: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_PALMYRENE;
pub const HB_SCRIPT_PAU_CIN_HAU: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_PAU_CIN_HAU;
pub const HB_SCRIPT_PSALTER_PAHLAVI: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_PSALTER_PAHLAVI;
pub const HB_SCRIPT_SIDDHAM: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_SIDDHAM;
pub const HB_SCRIPT_TIRHUTA: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_TIRHUTA;
pub const HB_SCRIPT_WARANG_CITI: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_WARANG_CITI;
pub const HB_SCRIPT_AHOM: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_AHOM;
pub const HB_SCRIPT_ANATOLIAN_HIEROGLYPHS: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_ANATOLIAN_HIEROGLYPHS;
pub const HB_SCRIPT_HATRAN: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_HATRAN;
pub const HB_SCRIPT_MULTANI: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_MULTANI;
pub const HB_SCRIPT_OLD_HUNGARIAN: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_OLD_HUNGARIAN;
pub const HB_SCRIPT_SIGNWRITING: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_SIGNWRITING;
pub const HB_SCRIPT_ADLAM: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_ADLAM;
pub const HB_SCRIPT_BHAIKSUKI: _bindgen_ty_3 =
    _bindgen_ty_3::HB_SCRIPT_BHAIKSUKI;
pub const HB_SCRIPT_MARCHEN: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_MARCHEN;
pub const HB_SCRIPT_OSAGE: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_OSAGE;
pub const HB_SCRIPT_TANGUT: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_TANGUT;
pub const HB_SCRIPT_NEWA: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_NEWA;
pub const HB_SCRIPT_INVALID: _bindgen_ty_3 = _bindgen_ty_3::HB_SCRIPT_INVALID;
pub const _HB_SCRIPT_MAX_VALUE: _bindgen_ty_3 =
    _bindgen_ty_3::_HB_SCRIPT_MAX_VALUE;
pub const _HB_SCRIPT_MAX_VALUE_SIGNED: _bindgen_ty_3 =
    _bindgen_ty_3::_HB_SCRIPT_MAX_VALUE_SIGNED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_3 {
    HB_SCRIPT_COMMON = 1517910393,
    HB_SCRIPT_INHERITED = 1516858984,
    HB_SCRIPT_UNKNOWN = 1517976186,
    HB_SCRIPT_ARABIC = 1098015074,
    HB_SCRIPT_ARMENIAN = 1098018158,
    HB_SCRIPT_BENGALI = 1113943655,
    HB_SCRIPT_CYRILLIC = 1132032620,
    HB_SCRIPT_DEVANAGARI = 1147500129,
    HB_SCRIPT_GEORGIAN = 1197830002,
    HB_SCRIPT_GREEK = 1198679403,
    HB_SCRIPT_GUJARATI = 1198877298,
    HB_SCRIPT_GURMUKHI = 1198879349,
    HB_SCRIPT_HANGUL = 1214344807,
    HB_SCRIPT_HAN = 1214344809,
    HB_SCRIPT_HEBREW = 1214603890,
    HB_SCRIPT_HIRAGANA = 1214870113,
    HB_SCRIPT_KANNADA = 1265525857,
    HB_SCRIPT_KATAKANA = 1264676449,
    HB_SCRIPT_LAO = 1281453935,
    HB_SCRIPT_LATIN = 1281455214,
    HB_SCRIPT_MALAYALAM = 1298954605,
    HB_SCRIPT_ORIYA = 1332902241,
    HB_SCRIPT_TAMIL = 1415671148,
    HB_SCRIPT_TELUGU = 1415933045,
    HB_SCRIPT_THAI = 1416126825,
    HB_SCRIPT_TIBETAN = 1416192628,
    HB_SCRIPT_BOPOMOFO = 1114599535,
    HB_SCRIPT_BRAILLE = 1114792297,
    HB_SCRIPT_CANADIAN_SYLLABICS = 1130458739,
    HB_SCRIPT_CHEROKEE = 1130915186,
    HB_SCRIPT_ETHIOPIC = 1165256809,
    HB_SCRIPT_KHMER = 1265134962,
    HB_SCRIPT_MONGOLIAN = 1299148391,
    HB_SCRIPT_MYANMAR = 1299803506,
    HB_SCRIPT_OGHAM = 1332175213,
    HB_SCRIPT_RUNIC = 1383427698,
    HB_SCRIPT_SINHALA = 1399418472,
    HB_SCRIPT_SYRIAC = 1400468067,
    HB_SCRIPT_THAANA = 1416126817,
    HB_SCRIPT_YI = 1500080489,
    HB_SCRIPT_DESERET = 1148416628,
    HB_SCRIPT_GOTHIC = 1198486632,
    HB_SCRIPT_OLD_ITALIC = 1232363884,
    HB_SCRIPT_BUHID = 1114990692,
    HB_SCRIPT_HANUNOO = 1214344815,
    HB_SCRIPT_TAGALOG = 1416064103,
    HB_SCRIPT_TAGBANWA = 1415669602,
    HB_SCRIPT_CYPRIOT = 1131442804,
    HB_SCRIPT_LIMBU = 1281977698,
    HB_SCRIPT_LINEAR_B = 1281977954,
    HB_SCRIPT_OSMANYA = 1332964705,
    HB_SCRIPT_SHAVIAN = 1399349623,
    HB_SCRIPT_TAI_LE = 1415670885,
    HB_SCRIPT_UGARITIC = 1432838514,
    HB_SCRIPT_BUGINESE = 1114990441,
    HB_SCRIPT_COPTIC = 1131376756,
    HB_SCRIPT_GLAGOLITIC = 1198285159,
    HB_SCRIPT_KHAROSHTHI = 1265131890,
    HB_SCRIPT_NEW_TAI_LUE = 1415670901,
    HB_SCRIPT_OLD_PERSIAN = 1483761007,
    HB_SCRIPT_SYLOTI_NAGRI = 1400466543,
    HB_SCRIPT_TIFINAGH = 1415999079,
    HB_SCRIPT_BALINESE = 1113681001,
    HB_SCRIPT_CUNEIFORM = 1483961720,
    HB_SCRIPT_NKO = 1315663727,
    HB_SCRIPT_PHAGS_PA = 1349017959,
    HB_SCRIPT_PHOENICIAN = 1349021304,
    HB_SCRIPT_CARIAN = 1130459753,
    HB_SCRIPT_CHAM = 1130914157,
    HB_SCRIPT_KAYAH_LI = 1264675945,
    HB_SCRIPT_LEPCHA = 1281716323,
    HB_SCRIPT_LYCIAN = 1283023721,
    HB_SCRIPT_LYDIAN = 1283023977,
    HB_SCRIPT_OL_CHIKI = 1332503403,
    HB_SCRIPT_REJANG = 1382706791,
    HB_SCRIPT_SAURASHTRA = 1398895986,
    HB_SCRIPT_SUNDANESE = 1400204900,
    HB_SCRIPT_VAI = 1449224553,
    HB_SCRIPT_AVESTAN = 1098281844,
    HB_SCRIPT_BAMUM = 1113681269,
    HB_SCRIPT_EGYPTIAN_HIEROGLYPHS = 1164409200,
    HB_SCRIPT_IMPERIAL_ARAMAIC = 1098018153,
    HB_SCRIPT_INSCRIPTIONAL_PAHLAVI = 1349020777,
    HB_SCRIPT_INSCRIPTIONAL_PARTHIAN = 1349678185,
    HB_SCRIPT_JAVANESE = 1247901281,
    HB_SCRIPT_KAITHI = 1265920105,
    HB_SCRIPT_LISU = 1281979253,
    HB_SCRIPT_MEETEI_MAYEK = 1299473769,
    HB_SCRIPT_OLD_SOUTH_ARABIAN = 1398895202,
    HB_SCRIPT_OLD_TURKIC = 1332898664,
    HB_SCRIPT_SAMARITAN = 1398893938,
    HB_SCRIPT_TAI_THAM = 1281453665,
    HB_SCRIPT_TAI_VIET = 1415673460,
    HB_SCRIPT_BATAK = 1113683051,
    HB_SCRIPT_BRAHMI = 1114792296,
    HB_SCRIPT_MANDAIC = 1298230884,
    HB_SCRIPT_CHAKMA = 1130457965,
    HB_SCRIPT_MEROITIC_CURSIVE = 1298494051,
    HB_SCRIPT_MEROITIC_HIEROGLYPHS = 1298494063,
    HB_SCRIPT_MIAO = 1349284452,
    HB_SCRIPT_SHARADA = 1399353956,
    HB_SCRIPT_SORA_SOMPENG = 1399812705,
    HB_SCRIPT_TAKRI = 1415670642,
    HB_SCRIPT_BASSA_VAH = 1113682803,
    HB_SCRIPT_CAUCASIAN_ALBANIAN = 1097295970,
    HB_SCRIPT_DUPLOYAN = 1148547180,
    HB_SCRIPT_ELBASAN = 1164730977,
    HB_SCRIPT_GRANTHA = 1198678382,
    HB_SCRIPT_KHOJKI = 1265135466,
    HB_SCRIPT_KHUDAWADI = 1399418468,
    HB_SCRIPT_LINEAR_A = 1281977953,
    HB_SCRIPT_MAHAJANI = 1298229354,
    HB_SCRIPT_MANICHAEAN = 1298230889,
    HB_SCRIPT_MENDE_KIKAKUI = 1298493028,
    HB_SCRIPT_MODI = 1299145833,
    HB_SCRIPT_MRO = 1299345263,
    HB_SCRIPT_NABATAEAN = 1315070324,
    HB_SCRIPT_OLD_NORTH_ARABIAN = 1315009122,
    HB_SCRIPT_OLD_PERMIC = 1348825709,
    HB_SCRIPT_PAHAWH_HMONG = 1215131239,
    HB_SCRIPT_PALMYRENE = 1348562029,
    HB_SCRIPT_PAU_CIN_HAU = 1348564323,
    HB_SCRIPT_PSALTER_PAHLAVI = 1349020784,
    HB_SCRIPT_SIDDHAM = 1399415908,
    HB_SCRIPT_TIRHUTA = 1416196712,
    HB_SCRIPT_WARANG_CITI = 1466004065,
    HB_SCRIPT_AHOM = 1097363309,
    HB_SCRIPT_ANATOLIAN_HIEROGLYPHS = 1215067511,
    HB_SCRIPT_HATRAN = 1214346354,
    HB_SCRIPT_MULTANI = 1299541108,
    HB_SCRIPT_OLD_HUNGARIAN = 1215655527,
    HB_SCRIPT_SIGNWRITING = 1399287415,
    HB_SCRIPT_ADLAM = 1097100397,
    HB_SCRIPT_BHAIKSUKI = 1114139507,
    HB_SCRIPT_MARCHEN = 1298231907,
    HB_SCRIPT_OSAGE = 1332963173,
    HB_SCRIPT_TANGUT = 1415671399,
    HB_SCRIPT_NEWA = 1315272545,
    HB_SCRIPT_INVALID = 0,
    _HB_SCRIPT_MAX_VALUE = 4294967295,
    _HB_SCRIPT_MAX_VALUE_SIGNED = 2147483647,
}
pub use self::_bindgen_ty_3 as hb_script_t;
extern "C" {
    pub fn hb_script_from_iso15924_tag(tag: hb_tag_t) -> hb_script_t;
}
extern "C" {
    pub fn hb_script_from_string(str: *const ::std::os::raw::c_char,
                                 len: ::std::os::raw::c_int) -> hb_script_t;
}
extern "C" {
    pub fn hb_script_to_iso15924_tag(script: hb_script_t) -> hb_tag_t;
}
extern "C" {
    pub fn hb_script_get_horizontal_direction(script: hb_script_t)
     -> hb_direction_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hb_user_data_key_t {
    pub unused: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_hb_user_data_key_t() {
    assert_eq!(::std::mem::size_of::<hb_user_data_key_t>() , 1usize);
    assert_eq!(::std::mem::align_of::<hb_user_data_key_t>() , 1usize);
}
impl Clone for hb_user_data_key_t {
    fn clone(&self) -> Self { *self }
}
pub type hb_destroy_func_t =
    ::std::option::Option<unsafe extern "C" fn(user_data:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hb_feature_t {
    pub tag: hb_tag_t,
    pub value: u32,
    pub start: ::std::os::raw::c_uint,
    pub end: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_hb_feature_t() {
    assert_eq!(::std::mem::size_of::<hb_feature_t>() , 16usize);
    assert_eq!(::std::mem::align_of::<hb_feature_t>() , 4usize);
}
impl Clone for hb_feature_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn hb_feature_from_string(str: *const ::std::os::raw::c_char,
                                  len: ::std::os::raw::c_int,
                                  feature: *mut hb_feature_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_feature_to_string(feature: *mut hb_feature_t,
                                buf: *mut ::std::os::raw::c_char,
                                size: ::std::os::raw::c_uint);
}
/**
 * hb_variation_t:
 *
 * Since: 1.4.2
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hb_variation_t {
    pub tag: hb_tag_t,
    pub value: f32,
}
#[test]
fn bindgen_test_layout_hb_variation_t() {
    assert_eq!(::std::mem::size_of::<hb_variation_t>() , 8usize);
    assert_eq!(::std::mem::align_of::<hb_variation_t>() , 4usize);
}
impl Clone for hb_variation_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn hb_variation_from_string(str: *const ::std::os::raw::c_char,
                                    len: ::std::os::raw::c_int,
                                    variation: *mut hb_variation_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_variation_to_string(variation: *mut hb_variation_t,
                                  buf: *mut ::std::os::raw::c_char,
                                  size: ::std::os::raw::c_uint);
}
pub const HB_MEMORY_MODE_DUPLICATE: _bindgen_ty_4 =
    _bindgen_ty_4::HB_MEMORY_MODE_DUPLICATE;
pub const HB_MEMORY_MODE_READONLY: _bindgen_ty_4 =
    _bindgen_ty_4::HB_MEMORY_MODE_READONLY;
pub const HB_MEMORY_MODE_WRITABLE: _bindgen_ty_4 =
    _bindgen_ty_4::HB_MEMORY_MODE_WRITABLE;
pub const HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE: _bindgen_ty_4 =
    _bindgen_ty_4::HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_4 {
    HB_MEMORY_MODE_DUPLICATE = 0,
    HB_MEMORY_MODE_READONLY = 1,
    HB_MEMORY_MODE_WRITABLE = 2,
    HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE = 3,
}
pub use self::_bindgen_ty_4 as hb_memory_mode_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hb_blob_t([u8; 0]);
extern "C" {
    pub fn hb_blob_create(data: *const ::std::os::raw::c_char,
                          length: ::std::os::raw::c_uint,
                          mode: hb_memory_mode_t,
                          user_data: *mut ::std::os::raw::c_void,
                          destroy: hb_destroy_func_t) -> *mut hb_blob_t;
}
extern "C" {
    pub fn hb_blob_create_sub_blob(parent: *mut hb_blob_t,
                                   offset: ::std::os::raw::c_uint,
                                   length: ::std::os::raw::c_uint)
     -> *mut hb_blob_t;
}
extern "C" {
    pub fn hb_blob_get_empty() -> *mut hb_blob_t;
}
extern "C" {
    pub fn hb_blob_reference(blob: *mut hb_blob_t) -> *mut hb_blob_t;
}
extern "C" {
    pub fn hb_blob_destroy(blob: *mut hb_blob_t);
}
extern "C" {
    pub fn hb_blob_set_user_data(blob: *mut hb_blob_t,
                                 key: *mut hb_user_data_key_t,
                                 data: *mut ::std::os::raw::c_void,
                                 destroy: hb_destroy_func_t,
                                 replace: hb_bool_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_blob_get_user_data(blob: *mut hb_blob_t,
                                 key: *mut hb_user_data_key_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hb_blob_make_immutable(blob: *mut hb_blob_t);
}
extern "C" {
    pub fn hb_blob_is_immutable(blob: *mut hb_blob_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_blob_get_length(blob: *mut hb_blob_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_blob_get_data(blob: *mut hb_blob_t,
                            length: *mut ::std::os::raw::c_uint)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn hb_blob_get_data_writable(blob: *mut hb_blob_t,
                                     length: *mut ::std::os::raw::c_uint)
     -> *mut ::std::os::raw::c_char;
}
pub const HB_UNICODE_GENERAL_CATEGORY_CONTROL: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_CONTROL;
pub const HB_UNICODE_GENERAL_CATEGORY_FORMAT: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_FORMAT;
pub const HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED;
pub const HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE;
pub const HB_UNICODE_GENERAL_CATEGORY_SURROGATE: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_SURROGATE;
pub const HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER;
pub const HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER;
pub const HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER;
pub const HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER;
pub const HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER;
pub const HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK;
pub const HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK;
pub const HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK;
pub const HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER;
pub const HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER;
pub const HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER;
pub const HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION;
pub const HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION;
pub const HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION;
pub const HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION;
pub const HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION;
pub const HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION;
pub const HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION;
pub const HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL;
pub const HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL;
pub const HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL;
pub const HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL;
pub const HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR;
pub const HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR;
pub const HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR: _bindgen_ty_5 =
    _bindgen_ty_5::HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_5 {
    HB_UNICODE_GENERAL_CATEGORY_CONTROL = 0,
    HB_UNICODE_GENERAL_CATEGORY_FORMAT = 1,
    HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED = 2,
    HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE = 3,
    HB_UNICODE_GENERAL_CATEGORY_SURROGATE = 4,
    HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER = 5,
    HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER = 6,
    HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER = 7,
    HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER = 8,
    HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER = 9,
    HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK = 10,
    HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK = 11,
    HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK = 12,
    HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER = 13,
    HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER = 14,
    HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER = 15,
    HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION = 16,
    HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION = 17,
    HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION = 18,
    HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION = 19,
    HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION = 20,
    HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION = 21,
    HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION = 22,
    HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL = 23,
    HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL = 24,
    HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL = 25,
    HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL = 26,
    HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR = 27,
    HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR = 28,
    HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR = 29,
}
pub use self::_bindgen_ty_5 as hb_unicode_general_category_t;
pub const HB_UNICODE_COMBINING_CLASS_NOT_REORDERED: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_NOT_REORDERED;
pub const HB_UNICODE_COMBINING_CLASS_OVERLAY: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_OVERLAY;
pub const HB_UNICODE_COMBINING_CLASS_NUKTA: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_NUKTA;
pub const HB_UNICODE_COMBINING_CLASS_KANA_VOICING: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_KANA_VOICING;
pub const HB_UNICODE_COMBINING_CLASS_VIRAMA: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_VIRAMA;
pub const HB_UNICODE_COMBINING_CLASS_CCC10: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC10;
pub const HB_UNICODE_COMBINING_CLASS_CCC11: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC11;
pub const HB_UNICODE_COMBINING_CLASS_CCC12: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC12;
pub const HB_UNICODE_COMBINING_CLASS_CCC13: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC13;
pub const HB_UNICODE_COMBINING_CLASS_CCC14: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC14;
pub const HB_UNICODE_COMBINING_CLASS_CCC15: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC15;
pub const HB_UNICODE_COMBINING_CLASS_CCC16: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC16;
pub const HB_UNICODE_COMBINING_CLASS_CCC17: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC17;
pub const HB_UNICODE_COMBINING_CLASS_CCC18: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC18;
pub const HB_UNICODE_COMBINING_CLASS_CCC19: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC19;
pub const HB_UNICODE_COMBINING_CLASS_CCC20: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC20;
pub const HB_UNICODE_COMBINING_CLASS_CCC21: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC21;
pub const HB_UNICODE_COMBINING_CLASS_CCC22: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC22;
pub const HB_UNICODE_COMBINING_CLASS_CCC23: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC23;
pub const HB_UNICODE_COMBINING_CLASS_CCC24: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC24;
pub const HB_UNICODE_COMBINING_CLASS_CCC25: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC25;
pub const HB_UNICODE_COMBINING_CLASS_CCC26: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC26;
pub const HB_UNICODE_COMBINING_CLASS_CCC27: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC27;
pub const HB_UNICODE_COMBINING_CLASS_CCC28: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC28;
pub const HB_UNICODE_COMBINING_CLASS_CCC29: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC29;
pub const HB_UNICODE_COMBINING_CLASS_CCC30: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC30;
pub const HB_UNICODE_COMBINING_CLASS_CCC31: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC31;
pub const HB_UNICODE_COMBINING_CLASS_CCC32: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC32;
pub const HB_UNICODE_COMBINING_CLASS_CCC33: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC33;
pub const HB_UNICODE_COMBINING_CLASS_CCC34: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC34;
pub const HB_UNICODE_COMBINING_CLASS_CCC35: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC35;
pub const HB_UNICODE_COMBINING_CLASS_CCC36: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC36;
pub const HB_UNICODE_COMBINING_CLASS_CCC84: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC84;
pub const HB_UNICODE_COMBINING_CLASS_CCC91: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC91;
pub const HB_UNICODE_COMBINING_CLASS_CCC103: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC103;
pub const HB_UNICODE_COMBINING_CLASS_CCC107: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC107;
pub const HB_UNICODE_COMBINING_CLASS_CCC118: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC118;
pub const HB_UNICODE_COMBINING_CLASS_CCC122: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC122;
pub const HB_UNICODE_COMBINING_CLASS_CCC129: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC129;
pub const HB_UNICODE_COMBINING_CLASS_CCC130: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC130;
pub const HB_UNICODE_COMBINING_CLASS_CCC133: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_CCC133;
pub const HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT;
pub const HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW;
pub const HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE;
pub const HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT;
pub const HB_UNICODE_COMBINING_CLASS_BELOW_LEFT: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_BELOW_LEFT;
pub const HB_UNICODE_COMBINING_CLASS_BELOW: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_BELOW;
pub const HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT;
pub const HB_UNICODE_COMBINING_CLASS_LEFT: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_LEFT;
pub const HB_UNICODE_COMBINING_CLASS_RIGHT: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_RIGHT;
pub const HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT;
pub const HB_UNICODE_COMBINING_CLASS_ABOVE: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_ABOVE;
pub const HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT;
pub const HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW;
pub const HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE;
pub const HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT;
pub const HB_UNICODE_COMBINING_CLASS_INVALID: _bindgen_ty_6 =
    _bindgen_ty_6::HB_UNICODE_COMBINING_CLASS_INVALID;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_6 {
    HB_UNICODE_COMBINING_CLASS_NOT_REORDERED = 0,
    HB_UNICODE_COMBINING_CLASS_OVERLAY = 1,
    HB_UNICODE_COMBINING_CLASS_NUKTA = 7,
    HB_UNICODE_COMBINING_CLASS_KANA_VOICING = 8,
    HB_UNICODE_COMBINING_CLASS_VIRAMA = 9,
    HB_UNICODE_COMBINING_CLASS_CCC10 = 10,
    HB_UNICODE_COMBINING_CLASS_CCC11 = 11,
    HB_UNICODE_COMBINING_CLASS_CCC12 = 12,
    HB_UNICODE_COMBINING_CLASS_CCC13 = 13,
    HB_UNICODE_COMBINING_CLASS_CCC14 = 14,
    HB_UNICODE_COMBINING_CLASS_CCC15 = 15,
    HB_UNICODE_COMBINING_CLASS_CCC16 = 16,
    HB_UNICODE_COMBINING_CLASS_CCC17 = 17,
    HB_UNICODE_COMBINING_CLASS_CCC18 = 18,
    HB_UNICODE_COMBINING_CLASS_CCC19 = 19,
    HB_UNICODE_COMBINING_CLASS_CCC20 = 20,
    HB_UNICODE_COMBINING_CLASS_CCC21 = 21,
    HB_UNICODE_COMBINING_CLASS_CCC22 = 22,
    HB_UNICODE_COMBINING_CLASS_CCC23 = 23,
    HB_UNICODE_COMBINING_CLASS_CCC24 = 24,
    HB_UNICODE_COMBINING_CLASS_CCC25 = 25,
    HB_UNICODE_COMBINING_CLASS_CCC26 = 26,
    HB_UNICODE_COMBINING_CLASS_CCC27 = 27,
    HB_UNICODE_COMBINING_CLASS_CCC28 = 28,
    HB_UNICODE_COMBINING_CLASS_CCC29 = 29,
    HB_UNICODE_COMBINING_CLASS_CCC30 = 30,
    HB_UNICODE_COMBINING_CLASS_CCC31 = 31,
    HB_UNICODE_COMBINING_CLASS_CCC32 = 32,
    HB_UNICODE_COMBINING_CLASS_CCC33 = 33,
    HB_UNICODE_COMBINING_CLASS_CCC34 = 34,
    HB_UNICODE_COMBINING_CLASS_CCC35 = 35,
    HB_UNICODE_COMBINING_CLASS_CCC36 = 36,
    HB_UNICODE_COMBINING_CLASS_CCC84 = 84,
    HB_UNICODE_COMBINING_CLASS_CCC91 = 91,
    HB_UNICODE_COMBINING_CLASS_CCC103 = 103,
    HB_UNICODE_COMBINING_CLASS_CCC107 = 107,
    HB_UNICODE_COMBINING_CLASS_CCC118 = 118,
    HB_UNICODE_COMBINING_CLASS_CCC122 = 122,
    HB_UNICODE_COMBINING_CLASS_CCC129 = 129,
    HB_UNICODE_COMBINING_CLASS_CCC130 = 130,
    HB_UNICODE_COMBINING_CLASS_CCC133 = 132,
    HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT = 200,
    HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW = 202,
    HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE = 214,
    HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT = 216,
    HB_UNICODE_COMBINING_CLASS_BELOW_LEFT = 218,
    HB_UNICODE_COMBINING_CLASS_BELOW = 220,
    HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT = 222,
    HB_UNICODE_COMBINING_CLASS_LEFT = 224,
    HB_UNICODE_COMBINING_CLASS_RIGHT = 226,
    HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT = 228,
    HB_UNICODE_COMBINING_CLASS_ABOVE = 230,
    HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT = 232,
    HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW = 233,
    HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE = 234,
    HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT = 240,
    HB_UNICODE_COMBINING_CLASS_INVALID = 255,
}
pub use self::_bindgen_ty_6 as hb_unicode_combining_class_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hb_unicode_funcs_t([u8; 0]);
extern "C" {
    pub fn hb_unicode_funcs_get_default() -> *mut hb_unicode_funcs_t;
}
extern "C" {
    pub fn hb_unicode_funcs_create(parent: *mut hb_unicode_funcs_t)
     -> *mut hb_unicode_funcs_t;
}
extern "C" {
    pub fn hb_unicode_funcs_get_empty() -> *mut hb_unicode_funcs_t;
}
extern "C" {
    pub fn hb_unicode_funcs_reference(ufuncs: *mut hb_unicode_funcs_t)
     -> *mut hb_unicode_funcs_t;
}
extern "C" {
    pub fn hb_unicode_funcs_destroy(ufuncs: *mut hb_unicode_funcs_t);
}
extern "C" {
    pub fn hb_unicode_funcs_set_user_data(ufuncs: *mut hb_unicode_funcs_t,
                                          key: *mut hb_user_data_key_t,
                                          data: *mut ::std::os::raw::c_void,
                                          destroy: hb_destroy_func_t,
                                          replace: hb_bool_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_unicode_funcs_get_user_data(ufuncs: *mut hb_unicode_funcs_t,
                                          key: *mut hb_user_data_key_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hb_unicode_funcs_make_immutable(ufuncs: *mut hb_unicode_funcs_t);
}
extern "C" {
    pub fn hb_unicode_funcs_is_immutable(ufuncs: *mut hb_unicode_funcs_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_unicode_funcs_get_parent(ufuncs: *mut hb_unicode_funcs_t)
     -> *mut hb_unicode_funcs_t;
}
pub type hb_unicode_combining_class_func_t =
    ::std::option::Option<unsafe extern "C" fn(ufuncs:
                                                   *mut hb_unicode_funcs_t,
                                               unicode: hb_codepoint_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> _bindgen_ty_6>;
pub type hb_unicode_eastasian_width_func_t =
    ::std::option::Option<unsafe extern "C" fn(ufuncs:
                                                   *mut hb_unicode_funcs_t,
                                               unicode: hb_codepoint_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_uint>;
pub type hb_unicode_general_category_func_t =
    ::std::option::Option<unsafe extern "C" fn(ufuncs:
                                                   *mut hb_unicode_funcs_t,
                                               unicode: hb_codepoint_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> _bindgen_ty_5>;
pub type hb_unicode_mirroring_func_t =
    ::std::option::Option<unsafe extern "C" fn(ufuncs:
                                                   *mut hb_unicode_funcs_t,
                                               unicode: hb_codepoint_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_uint>;
pub type hb_unicode_script_func_t =
    ::std::option::Option<unsafe extern "C" fn(ufuncs:
                                                   *mut hb_unicode_funcs_t,
                                               unicode: hb_codepoint_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> _bindgen_ty_3>;
pub type hb_unicode_compose_func_t =
    ::std::option::Option<unsafe extern "C" fn(ufuncs:
                                                   *mut hb_unicode_funcs_t,
                                               a: hb_codepoint_t,
                                               b: hb_codepoint_t,
                                               ab: *mut hb_codepoint_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type hb_unicode_decompose_func_t =
    ::std::option::Option<unsafe extern "C" fn(ufuncs:
                                                   *mut hb_unicode_funcs_t,
                                               ab: hb_codepoint_t,
                                               a: *mut hb_codepoint_t,
                                               b: *mut hb_codepoint_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
/**
 * hb_unicode_decompose_compatibility_func_t:
 * @ufuncs: a Unicode function structure
 * @u: codepoint to decompose
 * @decomposed: address of codepoint array (of length %HB_UNICODE_MAX_DECOMPOSITION_LEN) to write decomposition into
 * @user_data: user data pointer as passed to hb_unicode_funcs_set_decompose_compatibility_func()
 *
 * Fully decompose @u to its Unicode compatibility decomposition. The codepoints of the decomposition will be written to @decomposed.
 * The complete length of the decomposition will be returned.
 *
 * If @u has no compatibility decomposition, zero should be returned.
 *
 * The Unicode standard guarantees that a buffer of length %HB_UNICODE_MAX_DECOMPOSITION_LEN codepoints will always be sufficient for any
 * compatibility decomposition plus an terminating value of 0.  Consequently, @decompose must be allocated by the caller to be at least this length.  Implementations
 * of this function type must ensure that they do not write past the provided array.
 *
 * Return value: number of codepoints in the full compatibility decomposition of @u, or 0 if no decomposition available.
 */
pub type hb_unicode_decompose_compatibility_func_t =
    ::std::option::Option<unsafe extern "C" fn(ufuncs:
                                                   *mut hb_unicode_funcs_t,
                                               u: hb_codepoint_t,
                                               decomposed:
                                                   *mut hb_codepoint_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_uint>;
extern "C" {
    /**
 * hb_unicode_funcs_set_combining_class_func:
 * @ufuncs: a Unicode function structure
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_unicode_funcs_set_combining_class_func(ufuncs:
                                                         *mut hb_unicode_funcs_t,
                                                     func:
                                                         hb_unicode_combining_class_func_t,
                                                     user_data:
                                                         *mut ::std::os::raw::c_void,
                                                     destroy:
                                                         hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_unicode_funcs_set_eastasian_width_func:
 * @ufuncs: a Unicode function structure
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_unicode_funcs_set_eastasian_width_func(ufuncs:
                                                         *mut hb_unicode_funcs_t,
                                                     func:
                                                         hb_unicode_eastasian_width_func_t,
                                                     user_data:
                                                         *mut ::std::os::raw::c_void,
                                                     destroy:
                                                         hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_unicode_funcs_set_general_category_func:
 * @ufuncs: a Unicode function structure
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_unicode_funcs_set_general_category_func(ufuncs:
                                                          *mut hb_unicode_funcs_t,
                                                      func:
                                                          hb_unicode_general_category_func_t,
                                                      user_data:
                                                          *mut ::std::os::raw::c_void,
                                                      destroy:
                                                          hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_unicode_funcs_set_mirroring_func:
 * @ufuncs: a Unicode function structure
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_unicode_funcs_set_mirroring_func(ufuncs:
                                                   *mut hb_unicode_funcs_t,
                                               func:
                                                   hb_unicode_mirroring_func_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void,
                                               destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_unicode_funcs_set_script_func:
 * @ufuncs: a Unicode function structure
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_unicode_funcs_set_script_func(ufuncs: *mut hb_unicode_funcs_t,
                                            func: hb_unicode_script_func_t,
                                            user_data:
                                                *mut ::std::os::raw::c_void,
                                            destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_unicode_funcs_set_compose_func:
 * @ufuncs: a Unicode function structure
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_unicode_funcs_set_compose_func(ufuncs: *mut hb_unicode_funcs_t,
                                             func: hb_unicode_compose_func_t,
                                             user_data:
                                                 *mut ::std::os::raw::c_void,
                                             destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_unicode_funcs_set_decompose_func:
 * @ufuncs: a Unicode function structure
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_unicode_funcs_set_decompose_func(ufuncs:
                                                   *mut hb_unicode_funcs_t,
                                               func:
                                                   hb_unicode_decompose_func_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void,
                                               destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_unicode_funcs_set_decompose_compatibility_func:
 * @ufuncs: a Unicode function structure
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_unicode_funcs_set_decompose_compatibility_func(ufuncs:
                                                                 *mut hb_unicode_funcs_t,
                                                             func:
                                                                 hb_unicode_decompose_compatibility_func_t,
                                                             user_data:
                                                                 *mut ::std::os::raw::c_void,
                                                             destroy:
                                                                 hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_unicode_combining_class:
 *
 * Since: 0.9.2
 **/
    pub fn hb_unicode_combining_class(ufuncs: *mut hb_unicode_funcs_t,
                                      unicode: hb_codepoint_t)
     -> hb_unicode_combining_class_t;
}
extern "C" {
    /**
 * hb_unicode_eastasian_width:
 *
 * Since: 0.9.2
 **/
    pub fn hb_unicode_eastasian_width(ufuncs: *mut hb_unicode_funcs_t,
                                      unicode: hb_codepoint_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    /**
 * hb_unicode_general_category:
 *
 * Since: 0.9.2
 **/
    pub fn hb_unicode_general_category(ufuncs: *mut hb_unicode_funcs_t,
                                       unicode: hb_codepoint_t)
     -> hb_unicode_general_category_t;
}
extern "C" {
    /**
 * hb_unicode_mirroring:
 *
 * Since: 0.9.2
 **/
    pub fn hb_unicode_mirroring(ufuncs: *mut hb_unicode_funcs_t,
                                unicode: hb_codepoint_t) -> hb_codepoint_t;
}
extern "C" {
    /**
 * hb_unicode_script:
 *
 * Since: 0.9.2
 **/
    pub fn hb_unicode_script(ufuncs: *mut hb_unicode_funcs_t,
                             unicode: hb_codepoint_t) -> hb_script_t;
}
extern "C" {
    pub fn hb_unicode_compose(ufuncs: *mut hb_unicode_funcs_t,
                              a: hb_codepoint_t, b: hb_codepoint_t,
                              ab: *mut hb_codepoint_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_unicode_decompose(ufuncs: *mut hb_unicode_funcs_t,
                                ab: hb_codepoint_t, a: *mut hb_codepoint_t,
                                b: *mut hb_codepoint_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_unicode_decompose_compatibility(ufuncs: *mut hb_unicode_funcs_t,
                                              u: hb_codepoint_t,
                                              decomposed: *mut hb_codepoint_t)
     -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hb_face_t([u8; 0]);
extern "C" {
    pub fn hb_face_create(blob: *mut hb_blob_t, index: ::std::os::raw::c_uint)
     -> *mut hb_face_t;
}
pub type hb_reference_table_func_t =
    ::std::option::Option<unsafe extern "C" fn(face: *mut hb_face_t,
                                               tag: hb_tag_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut hb_blob_t>;
extern "C" {
    pub fn hb_face_create_for_tables(reference_table_func:
                                         hb_reference_table_func_t,
                                     user_data: *mut ::std::os::raw::c_void,
                                     destroy: hb_destroy_func_t)
     -> *mut hb_face_t;
}
extern "C" {
    pub fn hb_face_get_empty() -> *mut hb_face_t;
}
extern "C" {
    pub fn hb_face_reference(face: *mut hb_face_t) -> *mut hb_face_t;
}
extern "C" {
    pub fn hb_face_destroy(face: *mut hb_face_t);
}
extern "C" {
    pub fn hb_face_set_user_data(face: *mut hb_face_t,
                                 key: *mut hb_user_data_key_t,
                                 data: *mut ::std::os::raw::c_void,
                                 destroy: hb_destroy_func_t,
                                 replace: hb_bool_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_face_get_user_data(face: *mut hb_face_t,
                                 key: *mut hb_user_data_key_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hb_face_make_immutable(face: *mut hb_face_t);
}
extern "C" {
    pub fn hb_face_is_immutable(face: *mut hb_face_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_face_reference_table(face: *mut hb_face_t, tag: hb_tag_t)
     -> *mut hb_blob_t;
}
extern "C" {
    pub fn hb_face_reference_blob(face: *mut hb_face_t) -> *mut hb_blob_t;
}
extern "C" {
    pub fn hb_face_set_index(face: *mut hb_face_t,
                             index: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn hb_face_get_index(face: *mut hb_face_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_face_set_upem(face: *mut hb_face_t,
                            upem: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn hb_face_get_upem(face: *mut hb_face_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_face_set_glyph_count(face: *mut hb_face_t,
                                   glyph_count: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn hb_face_get_glyph_count(face: *mut hb_face_t)
     -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hb_font_t([u8; 0]);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hb_font_funcs_t([u8; 0]);
extern "C" {
    pub fn hb_font_funcs_create() -> *mut hb_font_funcs_t;
}
extern "C" {
    pub fn hb_font_funcs_get_empty() -> *mut hb_font_funcs_t;
}
extern "C" {
    pub fn hb_font_funcs_reference(ffuncs: *mut hb_font_funcs_t)
     -> *mut hb_font_funcs_t;
}
extern "C" {
    pub fn hb_font_funcs_destroy(ffuncs: *mut hb_font_funcs_t);
}
extern "C" {
    pub fn hb_font_funcs_set_user_data(ffuncs: *mut hb_font_funcs_t,
                                       key: *mut hb_user_data_key_t,
                                       data: *mut ::std::os::raw::c_void,
                                       destroy: hb_destroy_func_t,
                                       replace: hb_bool_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_funcs_get_user_data(ffuncs: *mut hb_font_funcs_t,
                                       key: *mut hb_user_data_key_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hb_font_funcs_make_immutable(ffuncs: *mut hb_font_funcs_t);
}
extern "C" {
    pub fn hb_font_funcs_is_immutable(ffuncs: *mut hb_font_funcs_t)
     -> hb_bool_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hb_font_extents_t {
    pub ascender: hb_position_t,
    pub descender: hb_position_t,
    pub line_gap: hb_position_t,
    pub reserved9: hb_position_t,
    pub reserved8: hb_position_t,
    pub reserved7: hb_position_t,
    pub reserved6: hb_position_t,
    pub reserved5: hb_position_t,
    pub reserved4: hb_position_t,
    pub reserved3: hb_position_t,
    pub reserved2: hb_position_t,
    pub reserved1: hb_position_t,
}
#[test]
fn bindgen_test_layout_hb_font_extents_t() {
    assert_eq!(::std::mem::size_of::<hb_font_extents_t>() , 48usize);
    assert_eq!(::std::mem::align_of::<hb_font_extents_t>() , 4usize);
}
impl Clone for hb_font_extents_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hb_glyph_extents_t {
    pub x_bearing: hb_position_t,
    pub y_bearing: hb_position_t,
    pub width: hb_position_t,
    pub height: hb_position_t,
}
#[test]
fn bindgen_test_layout_hb_glyph_extents_t() {
    assert_eq!(::std::mem::size_of::<hb_glyph_extents_t>() , 16usize);
    assert_eq!(::std::mem::align_of::<hb_glyph_extents_t>() , 4usize);
}
impl Clone for hb_glyph_extents_t {
    fn clone(&self) -> Self { *self }
}
pub type hb_font_get_font_extents_func_t =
    ::std::option::Option<unsafe extern "C" fn(font: *mut hb_font_t,
                                               font_data:
                                                   *mut ::std::os::raw::c_void,
                                               metrics:
                                                   *mut hb_font_extents_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type hb_font_get_font_h_extents_func_t = hb_font_get_font_extents_func_t;
pub type hb_font_get_font_v_extents_func_t = hb_font_get_font_extents_func_t;
pub type hb_font_get_nominal_glyph_func_t =
    ::std::option::Option<unsafe extern "C" fn(font: *mut hb_font_t,
                                               font_data:
                                                   *mut ::std::os::raw::c_void,
                                               unicode: hb_codepoint_t,
                                               glyph: *mut hb_codepoint_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type hb_font_get_variation_glyph_func_t =
    ::std::option::Option<unsafe extern "C" fn(font: *mut hb_font_t,
                                               font_data:
                                                   *mut ::std::os::raw::c_void,
                                               unicode: hb_codepoint_t,
                                               variation_selector:
                                                   hb_codepoint_t,
                                               glyph: *mut hb_codepoint_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type hb_font_get_glyph_advance_func_t =
    ::std::option::Option<unsafe extern "C" fn(font: *mut hb_font_t,
                                               font_data:
                                                   *mut ::std::os::raw::c_void,
                                               glyph: hb_codepoint_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type hb_font_get_glyph_h_advance_func_t =
    hb_font_get_glyph_advance_func_t;
pub type hb_font_get_glyph_v_advance_func_t =
    hb_font_get_glyph_advance_func_t;
pub type hb_font_get_glyph_origin_func_t =
    ::std::option::Option<unsafe extern "C" fn(font: *mut hb_font_t,
                                               font_data:
                                                   *mut ::std::os::raw::c_void,
                                               glyph: hb_codepoint_t,
                                               x: *mut hb_position_t,
                                               y: *mut hb_position_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type hb_font_get_glyph_h_origin_func_t = hb_font_get_glyph_origin_func_t;
pub type hb_font_get_glyph_v_origin_func_t = hb_font_get_glyph_origin_func_t;
pub type hb_font_get_glyph_kerning_func_t =
    ::std::option::Option<unsafe extern "C" fn(font: *mut hb_font_t,
                                               font_data:
                                                   *mut ::std::os::raw::c_void,
                                               first_glyph: hb_codepoint_t,
                                               second_glyph: hb_codepoint_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type hb_font_get_glyph_h_kerning_func_t =
    hb_font_get_glyph_kerning_func_t;
pub type hb_font_get_glyph_v_kerning_func_t =
    hb_font_get_glyph_kerning_func_t;
pub type hb_font_get_glyph_extents_func_t =
    ::std::option::Option<unsafe extern "C" fn(font: *mut hb_font_t,
                                               font_data:
                                                   *mut ::std::os::raw::c_void,
                                               glyph: hb_codepoint_t,
                                               extents:
                                                   *mut hb_glyph_extents_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type hb_font_get_glyph_contour_point_func_t =
    ::std::option::Option<unsafe extern "C" fn(font: *mut hb_font_t,
                                               font_data:
                                                   *mut ::std::os::raw::c_void,
                                               glyph: hb_codepoint_t,
                                               point_index:
                                                   ::std::os::raw::c_uint,
                                               x: *mut hb_position_t,
                                               y: *mut hb_position_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type hb_font_get_glyph_name_func_t =
    ::std::option::Option<unsafe extern "C" fn(font: *mut hb_font_t,
                                               font_data:
                                                   *mut ::std::os::raw::c_void,
                                               glyph: hb_codepoint_t,
                                               name:
                                                   *mut ::std::os::raw::c_char,
                                               size: ::std::os::raw::c_uint,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type hb_font_get_glyph_from_name_func_t =
    ::std::option::Option<unsafe extern "C" fn(font: *mut hb_font_t,
                                               font_data:
                                                   *mut ::std::os::raw::c_void,
                                               name:
                                                   *const ::std::os::raw::c_char,
                                               len: ::std::os::raw::c_int,
                                               glyph: *mut hb_codepoint_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    /**
 * hb_font_funcs_set_font_h_extents_func:
 * @ffuncs: font functions.
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 1.1.2
 **/
    pub fn hb_font_funcs_set_font_h_extents_func(ffuncs: *mut hb_font_funcs_t,
                                                 func:
                                                     hb_font_get_font_h_extents_func_t,
                                                 user_data:
                                                     *mut ::std::os::raw::c_void,
                                                 destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_font_funcs_set_font_v_extents_func:
 * @ffuncs: font functions.
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 1.1.2
 **/
    pub fn hb_font_funcs_set_font_v_extents_func(ffuncs: *mut hb_font_funcs_t,
                                                 func:
                                                     hb_font_get_font_v_extents_func_t,
                                                 user_data:
                                                     *mut ::std::os::raw::c_void,
                                                 destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_font_funcs_set_nominal_glyph_func:
 * @ffuncs: font functions.
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 1.2.3
 **/
    pub fn hb_font_funcs_set_nominal_glyph_func(ffuncs: *mut hb_font_funcs_t,
                                                func:
                                                    hb_font_get_nominal_glyph_func_t,
                                                user_data:
                                                    *mut ::std::os::raw::c_void,
                                                destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_font_funcs_set_variation_glyph_func:
 * @ffuncs: font functions.
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 1.2.3
 **/
    pub fn hb_font_funcs_set_variation_glyph_func(ffuncs:
                                                      *mut hb_font_funcs_t,
                                                  func:
                                                      hb_font_get_variation_glyph_func_t,
                                                  user_data:
                                                      *mut ::std::os::raw::c_void,
                                                  destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_font_funcs_set_glyph_h_advance_func:
 * @ffuncs: font functions.
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_font_funcs_set_glyph_h_advance_func(ffuncs:
                                                      *mut hb_font_funcs_t,
                                                  func:
                                                      hb_font_get_glyph_h_advance_func_t,
                                                  user_data:
                                                      *mut ::std::os::raw::c_void,
                                                  destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_font_funcs_set_glyph_v_advance_func:
 * @ffuncs: font functions.
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_font_funcs_set_glyph_v_advance_func(ffuncs:
                                                      *mut hb_font_funcs_t,
                                                  func:
                                                      hb_font_get_glyph_v_advance_func_t,
                                                  user_data:
                                                      *mut ::std::os::raw::c_void,
                                                  destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_font_funcs_set_glyph_h_origin_func:
 * @ffuncs: font functions.
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_font_funcs_set_glyph_h_origin_func(ffuncs: *mut hb_font_funcs_t,
                                                 func:
                                                     hb_font_get_glyph_h_origin_func_t,
                                                 user_data:
                                                     *mut ::std::os::raw::c_void,
                                                 destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_font_funcs_set_glyph_v_origin_func:
 * @ffuncs: font functions.
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_font_funcs_set_glyph_v_origin_func(ffuncs: *mut hb_font_funcs_t,
                                                 func:
                                                     hb_font_get_glyph_v_origin_func_t,
                                                 user_data:
                                                     *mut ::std::os::raw::c_void,
                                                 destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_font_funcs_set_glyph_h_kerning_func:
 * @ffuncs: font functions.
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_font_funcs_set_glyph_h_kerning_func(ffuncs:
                                                      *mut hb_font_funcs_t,
                                                  func:
                                                      hb_font_get_glyph_h_kerning_func_t,
                                                  user_data:
                                                      *mut ::std::os::raw::c_void,
                                                  destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_font_funcs_set_glyph_v_kerning_func:
 * @ffuncs: font functions.
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_font_funcs_set_glyph_v_kerning_func(ffuncs:
                                                      *mut hb_font_funcs_t,
                                                  func:
                                                      hb_font_get_glyph_v_kerning_func_t,
                                                  user_data:
                                                      *mut ::std::os::raw::c_void,
                                                  destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_font_funcs_set_glyph_extents_func:
 * @ffuncs: font functions.
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_font_funcs_set_glyph_extents_func(ffuncs: *mut hb_font_funcs_t,
                                                func:
                                                    hb_font_get_glyph_extents_func_t,
                                                user_data:
                                                    *mut ::std::os::raw::c_void,
                                                destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_font_funcs_set_glyph_contour_point_func:
 * @ffuncs: font functions.
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_font_funcs_set_glyph_contour_point_func(ffuncs:
                                                          *mut hb_font_funcs_t,
                                                      func:
                                                          hb_font_get_glyph_contour_point_func_t,
                                                      user_data:
                                                          *mut ::std::os::raw::c_void,
                                                      destroy:
                                                          hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_font_funcs_set_glyph_name_func:
 * @ffuncs: font functions.
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_font_funcs_set_glyph_name_func(ffuncs: *mut hb_font_funcs_t,
                                             func:
                                                 hb_font_get_glyph_name_func_t,
                                             user_data:
                                                 *mut ::std::os::raw::c_void,
                                             destroy: hb_destroy_func_t);
}
extern "C" {
    /**
 * hb_font_funcs_set_glyph_from_name_func:
 * @ffuncs: font functions.
 * @func: (closure user_data) (destroy destroy) (scope notified):
 * @user_data:
 * @destroy:
 *
 *
 *
 * Since: 0.9.2
 **/
    pub fn hb_font_funcs_set_glyph_from_name_func(ffuncs:
                                                      *mut hb_font_funcs_t,
                                                  func:
                                                      hb_font_get_glyph_from_name_func_t,
                                                  user_data:
                                                      *mut ::std::os::raw::c_void,
                                                  destroy: hb_destroy_func_t);
}
extern "C" {
    pub fn hb_font_get_h_extents(font: *mut hb_font_t,
                                 extents: *mut hb_font_extents_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_get_v_extents(font: *mut hb_font_t,
                                 extents: *mut hb_font_extents_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_get_nominal_glyph(font: *mut hb_font_t,
                                     unicode: hb_codepoint_t,
                                     glyph: *mut hb_codepoint_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_get_variation_glyph(font: *mut hb_font_t,
                                       unicode: hb_codepoint_t,
                                       variation_selector: hb_codepoint_t,
                                       glyph: *mut hb_codepoint_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_get_glyph_h_advance(font: *mut hb_font_t,
                                       glyph: hb_codepoint_t)
     -> hb_position_t;
}
extern "C" {
    pub fn hb_font_get_glyph_v_advance(font: *mut hb_font_t,
                                       glyph: hb_codepoint_t)
     -> hb_position_t;
}
extern "C" {
    pub fn hb_font_get_glyph_h_origin(font: *mut hb_font_t,
                                      glyph: hb_codepoint_t,
                                      x: *mut hb_position_t,
                                      y: *mut hb_position_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_get_glyph_v_origin(font: *mut hb_font_t,
                                      glyph: hb_codepoint_t,
                                      x: *mut hb_position_t,
                                      y: *mut hb_position_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_get_glyph_h_kerning(font: *mut hb_font_t,
                                       left_glyph: hb_codepoint_t,
                                       right_glyph: hb_codepoint_t)
     -> hb_position_t;
}
extern "C" {
    pub fn hb_font_get_glyph_v_kerning(font: *mut hb_font_t,
                                       top_glyph: hb_codepoint_t,
                                       bottom_glyph: hb_codepoint_t)
     -> hb_position_t;
}
extern "C" {
    pub fn hb_font_get_glyph_extents(font: *mut hb_font_t,
                                     glyph: hb_codepoint_t,
                                     extents: *mut hb_glyph_extents_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_get_glyph_contour_point(font: *mut hb_font_t,
                                           glyph: hb_codepoint_t,
                                           point_index:
                                               ::std::os::raw::c_uint,
                                           x: *mut hb_position_t,
                                           y: *mut hb_position_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_get_glyph_name(font: *mut hb_font_t, glyph: hb_codepoint_t,
                                  name: *mut ::std::os::raw::c_char,
                                  size: ::std::os::raw::c_uint) -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_get_glyph_from_name(font: *mut hb_font_t,
                                       name: *const ::std::os::raw::c_char,
                                       len: ::std::os::raw::c_int,
                                       glyph: *mut hb_codepoint_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_get_glyph(font: *mut hb_font_t, unicode: hb_codepoint_t,
                             variation_selector: hb_codepoint_t,
                             glyph: *mut hb_codepoint_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_get_extents_for_direction(font: *mut hb_font_t,
                                             direction: hb_direction_t,
                                             extents: *mut hb_font_extents_t);
}
extern "C" {
    pub fn hb_font_get_glyph_advance_for_direction(font: *mut hb_font_t,
                                                   glyph: hb_codepoint_t,
                                                   direction: hb_direction_t,
                                                   x: *mut hb_position_t,
                                                   y: *mut hb_position_t);
}
extern "C" {
    pub fn hb_font_get_glyph_origin_for_direction(font: *mut hb_font_t,
                                                  glyph: hb_codepoint_t,
                                                  direction: hb_direction_t,
                                                  x: *mut hb_position_t,
                                                  y: *mut hb_position_t);
}
extern "C" {
    pub fn hb_font_add_glyph_origin_for_direction(font: *mut hb_font_t,
                                                  glyph: hb_codepoint_t,
                                                  direction: hb_direction_t,
                                                  x: *mut hb_position_t,
                                                  y: *mut hb_position_t);
}
extern "C" {
    pub fn hb_font_subtract_glyph_origin_for_direction(font: *mut hb_font_t,
                                                       glyph: hb_codepoint_t,
                                                       direction:
                                                           hb_direction_t,
                                                       x: *mut hb_position_t,
                                                       y: *mut hb_position_t);
}
extern "C" {
    pub fn hb_font_get_glyph_kerning_for_direction(font: *mut hb_font_t,
                                                   first_glyph:
                                                       hb_codepoint_t,
                                                   second_glyph:
                                                       hb_codepoint_t,
                                                   direction: hb_direction_t,
                                                   x: *mut hb_position_t,
                                                   y: *mut hb_position_t);
}
extern "C" {
    pub fn hb_font_get_glyph_extents_for_origin(font: *mut hb_font_t,
                                                glyph: hb_codepoint_t,
                                                direction: hb_direction_t,
                                                extents:
                                                    *mut hb_glyph_extents_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_get_glyph_contour_point_for_origin(font: *mut hb_font_t,
                                                      glyph: hb_codepoint_t,
                                                      point_index:
                                                          ::std::os::raw::c_uint,
                                                      direction:
                                                          hb_direction_t,
                                                      x: *mut hb_position_t,
                                                      y: *mut hb_position_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_glyph_to_string(font: *mut hb_font_t,
                                   glyph: hb_codepoint_t,
                                   s: *mut ::std::os::raw::c_char,
                                   size: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn hb_font_glyph_from_string(font: *mut hb_font_t,
                                     s: *const ::std::os::raw::c_char,
                                     len: ::std::os::raw::c_int,
                                     glyph: *mut hb_codepoint_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_create(face: *mut hb_face_t) -> *mut hb_font_t;
}
extern "C" {
    pub fn hb_font_create_sub_font(parent: *mut hb_font_t) -> *mut hb_font_t;
}
extern "C" {
    pub fn hb_font_get_empty() -> *mut hb_font_t;
}
extern "C" {
    pub fn hb_font_reference(font: *mut hb_font_t) -> *mut hb_font_t;
}
extern "C" {
    pub fn hb_font_destroy(font: *mut hb_font_t);
}
extern "C" {
    pub fn hb_font_set_user_data(font: *mut hb_font_t,
                                 key: *mut hb_user_data_key_t,
                                 data: *mut ::std::os::raw::c_void,
                                 destroy: hb_destroy_func_t,
                                 replace: hb_bool_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_get_user_data(font: *mut hb_font_t,
                                 key: *mut hb_user_data_key_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hb_font_make_immutable(font: *mut hb_font_t);
}
extern "C" {
    pub fn hb_font_is_immutable(font: *mut hb_font_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_font_set_parent(font: *mut hb_font_t, parent: *mut hb_font_t);
}
extern "C" {
    pub fn hb_font_get_parent(font: *mut hb_font_t) -> *mut hb_font_t;
}
extern "C" {
    pub fn hb_font_get_face(font: *mut hb_font_t) -> *mut hb_face_t;
}
extern "C" {
    pub fn hb_font_set_funcs(font: *mut hb_font_t,
                             klass: *mut hb_font_funcs_t,
                             font_data: *mut ::std::os::raw::c_void,
                             destroy: hb_destroy_func_t);
}
extern "C" {
    pub fn hb_font_set_funcs_data(font: *mut hb_font_t,
                                  font_data: *mut ::std::os::raw::c_void,
                                  destroy: hb_destroy_func_t);
}
extern "C" {
    pub fn hb_font_set_scale(font: *mut hb_font_t,
                             x_scale: ::std::os::raw::c_int,
                             y_scale: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hb_font_get_scale(font: *mut hb_font_t,
                             x_scale: *mut ::std::os::raw::c_int,
                             y_scale: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn hb_font_set_ppem(font: *mut hb_font_t,
                            x_ppem: ::std::os::raw::c_uint,
                            y_ppem: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn hb_font_get_ppem(font: *mut hb_font_t,
                            x_ppem: *mut ::std::os::raw::c_uint,
                            y_ppem: *mut ::std::os::raw::c_uint);
}
extern "C" {
    pub fn hb_font_set_variations(font: *mut hb_font_t,
                                  variations: *const hb_variation_t,
                                  variations_length: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn hb_font_set_var_coords_design(font: *mut hb_font_t,
                                         coords: *const f32,
                                         coords_length:
                                             ::std::os::raw::c_uint);
}
extern "C" {
    pub fn hb_font_set_var_coords_normalized(font: *mut hb_font_t,
                                             coords:
                                                 *const ::std::os::raw::c_int,
                                             coords_length:
                                                 ::std::os::raw::c_uint);
}
extern "C" {
    pub fn hb_font_get_var_coords_normalized(font: *mut hb_font_t,
                                             length:
                                                 *mut ::std::os::raw::c_uint)
     -> *const ::std::os::raw::c_int;
}
/**
 * hb_glyph_info_t:
 * @codepoint: either a Unicode code point (before shaping) or a glyph index
 *             (after shaping).
 * @mask:
 * @cluster: the index of the character in the original text that corresponds
 *           to this #hb_glyph_info_t, or whatever the client passes to
 *           hb_buffer_add(). More than one #hb_glyph_info_t can have the same
 *           @cluster value, if they resulted from the same character (e.g. one
 *           to many glyph substitution), and when more than one character gets
 *           merged in the same glyph (e.g. many to one glyph substitution) the
 *           #hb_glyph_info_t will have the smallest cluster value of them.
 *           By default some characters are merged into the same cluster
 *           (e.g. combining marks have the same cluster as their bases)
 *           even if they are separate glyphs, hb_buffer_set_cluster_level()
 *           allow selecting more fine-grained cluster handling.
 *
 * The #hb_glyph_info_t is the structure that holds information about the
 * glyphs and their relation to input text.
 *
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hb_glyph_info_t {
    pub codepoint: hb_codepoint_t,
    pub mask: hb_mask_t,
    pub cluster: u32,
    pub var1: hb_var_int_t,
    pub var2: hb_var_int_t,
}
#[test]
fn bindgen_test_layout_hb_glyph_info_t() {
    assert_eq!(::std::mem::size_of::<hb_glyph_info_t>() , 20usize);
    assert_eq!(::std::mem::align_of::<hb_glyph_info_t>() , 4usize);
}
impl Clone for hb_glyph_info_t {
    fn clone(&self) -> Self { *self }
}
/**
 * hb_glyph_position_t:
 * @x_advance: how much the line advances after drawing this glyph when setting
 *             text in horizontal direction.
 * @y_advance: how much the line advances after drawing this glyph when setting
 *             text in vertical direction.
 * @x_offset: how much the glyph moves on the X-axis before drawing it, this
 *            should not affect how much the line advances.
 * @y_offset: how much the glyph moves on the Y-axis before drawing it, this
 *            should not affect how much the line advances.
 *
 * The #hb_glyph_position_t is the structure that holds the positions of the
 * glyph in both horizontal and vertical directions. All positions in
 * #hb_glyph_position_t are relative to the current point.
 *
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hb_glyph_position_t {
    pub x_advance: hb_position_t,
    pub y_advance: hb_position_t,
    pub x_offset: hb_position_t,
    pub y_offset: hb_position_t,
    pub var: hb_var_int_t,
}
#[test]
fn bindgen_test_layout_hb_glyph_position_t() {
    assert_eq!(::std::mem::size_of::<hb_glyph_position_t>() , 20usize);
    assert_eq!(::std::mem::align_of::<hb_glyph_position_t>() , 4usize);
}
impl Clone for hb_glyph_position_t {
    fn clone(&self) -> Self { *self }
}
/**
 * hb_segment_properties_t:
 * @direction: the #hb_direction_t of the buffer, see hb_buffer_set_direction().
 * @script: the #hb_script_t of the buffer, see hb_buffer_set_script().
 * @language: the #hb_language_t of the buffer, see hb_buffer_set_language().
 *
 * The structure that holds various text properties of an #hb_buffer_t. Can be
 * set and retrieved using hb_buffer_set_segment_properties() and
 * hb_buffer_get_segment_properties(), respectively.
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hb_segment_properties_t {
    pub direction: hb_direction_t,
    pub script: hb_script_t,
    pub language: hb_language_t,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_hb_segment_properties_t() {
    assert_eq!(::std::mem::size_of::<hb_segment_properties_t>() , 32usize);
    assert_eq!(::std::mem::align_of::<hb_segment_properties_t>() , 8usize);
}
impl Clone for hb_segment_properties_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn hb_segment_properties_equal(a: *const hb_segment_properties_t,
                                       b: *const hb_segment_properties_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_segment_properties_hash(p: *const hb_segment_properties_t)
     -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hb_buffer_t([u8; 0]);
extern "C" {
    pub fn hb_buffer_create() -> *mut hb_buffer_t;
}
extern "C" {
    pub fn hb_buffer_get_empty() -> *mut hb_buffer_t;
}
extern "C" {
    pub fn hb_buffer_reference(buffer: *mut hb_buffer_t) -> *mut hb_buffer_t;
}
extern "C" {
    pub fn hb_buffer_destroy(buffer: *mut hb_buffer_t);
}
extern "C" {
    pub fn hb_buffer_set_user_data(buffer: *mut hb_buffer_t,
                                   key: *mut hb_user_data_key_t,
                                   data: *mut ::std::os::raw::c_void,
                                   destroy: hb_destroy_func_t,
                                   replace: hb_bool_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_buffer_get_user_data(buffer: *mut hb_buffer_t,
                                   key: *mut hb_user_data_key_t)
     -> *mut ::std::os::raw::c_void;
}
pub const HB_BUFFER_CONTENT_TYPE_INVALID: _bindgen_ty_7 =
    _bindgen_ty_7::HB_BUFFER_CONTENT_TYPE_INVALID;
pub const HB_BUFFER_CONTENT_TYPE_UNICODE: _bindgen_ty_7 =
    _bindgen_ty_7::HB_BUFFER_CONTENT_TYPE_UNICODE;
pub const HB_BUFFER_CONTENT_TYPE_GLYPHS: _bindgen_ty_7 =
    _bindgen_ty_7::HB_BUFFER_CONTENT_TYPE_GLYPHS;
#[repr(u32)]
/**
 * hb_buffer_content_type_t:
 * @HB_BUFFER_CONTENT_TYPE_INVALID: Initial value for new buffer.
 * @HB_BUFFER_CONTENT_TYPE_UNICODE: The buffer contains input characters (before shaping).
 * @HB_BUFFER_CONTENT_TYPE_GLYPHS: The buffer contains output glyphs (after shaping).
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_7 {
    HB_BUFFER_CONTENT_TYPE_INVALID = 0,
    HB_BUFFER_CONTENT_TYPE_UNICODE = 1,
    HB_BUFFER_CONTENT_TYPE_GLYPHS = 2,
}
pub use self::_bindgen_ty_7 as hb_buffer_content_type_t;
extern "C" {
    pub fn hb_buffer_set_content_type(buffer: *mut hb_buffer_t,
                                      content_type: hb_buffer_content_type_t);
}
extern "C" {
    pub fn hb_buffer_get_content_type(buffer: *mut hb_buffer_t)
     -> hb_buffer_content_type_t;
}
extern "C" {
    pub fn hb_buffer_set_unicode_funcs(buffer: *mut hb_buffer_t,
                                       unicode_funcs:
                                           *mut hb_unicode_funcs_t);
}
extern "C" {
    pub fn hb_buffer_get_unicode_funcs(buffer: *mut hb_buffer_t)
     -> *mut hb_unicode_funcs_t;
}
extern "C" {
    pub fn hb_buffer_set_direction(buffer: *mut hb_buffer_t,
                                   direction: hb_direction_t);
}
extern "C" {
    pub fn hb_buffer_get_direction(buffer: *mut hb_buffer_t)
     -> hb_direction_t;
}
extern "C" {
    pub fn hb_buffer_set_script(buffer: *mut hb_buffer_t,
                                script: hb_script_t);
}
extern "C" {
    pub fn hb_buffer_get_script(buffer: *mut hb_buffer_t) -> hb_script_t;
}
extern "C" {
    pub fn hb_buffer_set_language(buffer: *mut hb_buffer_t,
                                  language: hb_language_t);
}
extern "C" {
    pub fn hb_buffer_get_language(buffer: *mut hb_buffer_t) -> hb_language_t;
}
extern "C" {
    pub fn hb_buffer_set_segment_properties(buffer: *mut hb_buffer_t,
                                            props:
                                                *const hb_segment_properties_t);
}
extern "C" {
    pub fn hb_buffer_get_segment_properties(buffer: *mut hb_buffer_t,
                                            props:
                                                *mut hb_segment_properties_t);
}
extern "C" {
    pub fn hb_buffer_guess_segment_properties(buffer: *mut hb_buffer_t);
}
pub const HB_BUFFER_FLAG_DEFAULT: _bindgen_ty_8 =
    _bindgen_ty_8::HB_BUFFER_FLAG_DEFAULT;
pub const HB_BUFFER_FLAG_BOT: _bindgen_ty_8 =
    _bindgen_ty_8::HB_BUFFER_FLAG_BOT;
pub const HB_BUFFER_FLAG_EOT: _bindgen_ty_8 =
    _bindgen_ty_8::HB_BUFFER_FLAG_EOT;
pub const HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES: _bindgen_ty_8 =
    _bindgen_ty_8::HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES;
#[repr(u32)]
/**
 * hb_buffer_flags_t:
 * @HB_BUFFER_FLAG_DEFAULT: the default buffer flag.
 * @HB_BUFFER_FLAG_BOT: flag indicating that special handling of the beginning
 *                      of text paragraph can be applied to this buffer. Should usually
 *                      be set, unless you are passing to the buffer only part
 *                      of the text without the full context.
 * @HB_BUFFER_FLAG_EOT: flag indicating that special handling of the end of text
 *                      paragraph can be applied to this buffer, similar to
 *                      @HB_BUFFER_FLAG_EOT.
 * @HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES:
 *                      flag indication that character with Default_Ignorable
 *                      Unicode property should use the corresponding glyph
 *                      from the font, instead of hiding them (currently done
 *                      by replacing them with the space glyph and zeroing the
 *                      advance width.)
 *
 * Since: 0.9.20
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_8 {
    HB_BUFFER_FLAG_DEFAULT = 0,
    HB_BUFFER_FLAG_BOT = 1,
    HB_BUFFER_FLAG_EOT = 2,
    HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES = 4,
}
pub use self::_bindgen_ty_8 as hb_buffer_flags_t;
extern "C" {
    pub fn hb_buffer_set_flags(buffer: *mut hb_buffer_t,
                               flags: hb_buffer_flags_t);
}
extern "C" {
    pub fn hb_buffer_get_flags(buffer: *mut hb_buffer_t) -> hb_buffer_flags_t;
}
pub const HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES: _bindgen_ty_9 =
    _bindgen_ty_9::HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES;
pub const HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS: _bindgen_ty_9 =
    _bindgen_ty_9::HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS;
pub const HB_BUFFER_CLUSTER_LEVEL_CHARACTERS: _bindgen_ty_9 =
    _bindgen_ty_9::HB_BUFFER_CLUSTER_LEVEL_CHARACTERS;
pub const HB_BUFFER_CLUSTER_LEVEL_DEFAULT: _bindgen_ty_9 =
    _bindgen_ty_9::HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_9 {
    HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES = 0,
    HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS = 1,
    HB_BUFFER_CLUSTER_LEVEL_CHARACTERS = 2,
}
pub use self::_bindgen_ty_9 as hb_buffer_cluster_level_t;
extern "C" {
    pub fn hb_buffer_set_cluster_level(buffer: *mut hb_buffer_t,
                                       cluster_level:
                                           hb_buffer_cluster_level_t);
}
extern "C" {
    pub fn hb_buffer_get_cluster_level(buffer: *mut hb_buffer_t)
     -> hb_buffer_cluster_level_t;
}
extern "C" {
    pub fn hb_buffer_set_replacement_codepoint(buffer: *mut hb_buffer_t,
                                               replacement: hb_codepoint_t);
}
extern "C" {
    pub fn hb_buffer_get_replacement_codepoint(buffer: *mut hb_buffer_t)
     -> hb_codepoint_t;
}
extern "C" {
    pub fn hb_buffer_reset(buffer: *mut hb_buffer_t);
}
extern "C" {
    pub fn hb_buffer_clear_contents(buffer: *mut hb_buffer_t);
}
extern "C" {
    pub fn hb_buffer_pre_allocate(buffer: *mut hb_buffer_t,
                                  size: ::std::os::raw::c_uint) -> hb_bool_t;
}
extern "C" {
    pub fn hb_buffer_allocation_successful(buffer: *mut hb_buffer_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_buffer_reverse(buffer: *mut hb_buffer_t);
}
extern "C" {
    pub fn hb_buffer_reverse_range(buffer: *mut hb_buffer_t,
                                   start: ::std::os::raw::c_uint,
                                   end: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn hb_buffer_reverse_clusters(buffer: *mut hb_buffer_t);
}
extern "C" {
    pub fn hb_buffer_add(buffer: *mut hb_buffer_t, codepoint: hb_codepoint_t,
                         cluster: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn hb_buffer_add_utf8(buffer: *mut hb_buffer_t,
                              text: *const ::std::os::raw::c_char,
                              text_length: ::std::os::raw::c_int,
                              item_offset: ::std::os::raw::c_uint,
                              item_length: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hb_buffer_add_utf16(buffer: *mut hb_buffer_t, text: *const u16,
                               text_length: ::std::os::raw::c_int,
                               item_offset: ::std::os::raw::c_uint,
                               item_length: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hb_buffer_add_utf32(buffer: *mut hb_buffer_t, text: *const u32,
                               text_length: ::std::os::raw::c_int,
                               item_offset: ::std::os::raw::c_uint,
                               item_length: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hb_buffer_add_latin1(buffer: *mut hb_buffer_t, text: *const u8,
                                text_length: ::std::os::raw::c_int,
                                item_offset: ::std::os::raw::c_uint,
                                item_length: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hb_buffer_add_codepoints(buffer: *mut hb_buffer_t,
                                    text: *const hb_codepoint_t,
                                    text_length: ::std::os::raw::c_int,
                                    item_offset: ::std::os::raw::c_uint,
                                    item_length: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hb_buffer_set_length(buffer: *mut hb_buffer_t,
                                length: ::std::os::raw::c_uint) -> hb_bool_t;
}
extern "C" {
    pub fn hb_buffer_get_length(buffer: *mut hb_buffer_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_buffer_get_glyph_infos(buffer: *mut hb_buffer_t,
                                     length: *mut ::std::os::raw::c_uint)
     -> *mut hb_glyph_info_t;
}
extern "C" {
    pub fn hb_buffer_get_glyph_positions(buffer: *mut hb_buffer_t,
                                         length: *mut ::std::os::raw::c_uint)
     -> *mut hb_glyph_position_t;
}
extern "C" {
    pub fn hb_buffer_normalize_glyphs(buffer: *mut hb_buffer_t);
}
pub const HB_BUFFER_SERIALIZE_FLAG_DEFAULT: _bindgen_ty_10 =
    _bindgen_ty_10::HB_BUFFER_SERIALIZE_FLAG_DEFAULT;
pub const HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS: _bindgen_ty_10 =
    _bindgen_ty_10::HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS;
pub const HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS: _bindgen_ty_10 =
    _bindgen_ty_10::HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS;
pub const HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES: _bindgen_ty_10 =
    _bindgen_ty_10::HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES;
pub const HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS: _bindgen_ty_10 =
    _bindgen_ty_10::HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS;
#[repr(u32)]
/**
 * hb_buffer_serialize_flags_t:
 * @HB_BUFFER_SERIALIZE_FLAG_DEFAULT: serialize glyph names, clusters and positions.
 * @HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS: do not serialize glyph cluster.
 * @HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS: do not serialize glyph position information.
 * @HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES: do no serialize glyph name.
 * @HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS: serialize glyph extents.
 *
 * Flags that control what glyph information are serialized in hb_buffer_serialize_glyphs().
 *
 * Since: 0.9.20
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_10 {
    HB_BUFFER_SERIALIZE_FLAG_DEFAULT = 0,
    HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS = 1,
    HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS = 2,
    HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES = 4,
    HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS = 8,
}
pub use self::_bindgen_ty_10 as hb_buffer_serialize_flags_t;
pub const HB_BUFFER_SERIALIZE_FORMAT_TEXT: _bindgen_ty_11 =
    _bindgen_ty_11::HB_BUFFER_SERIALIZE_FORMAT_TEXT;
pub const HB_BUFFER_SERIALIZE_FORMAT_JSON: _bindgen_ty_11 =
    _bindgen_ty_11::HB_BUFFER_SERIALIZE_FORMAT_JSON;
pub const HB_BUFFER_SERIALIZE_FORMAT_INVALID: _bindgen_ty_11 =
    _bindgen_ty_11::HB_BUFFER_SERIALIZE_FORMAT_INVALID;
#[repr(u32)]
/**
 * hb_buffer_serialize_format_t:
 * @HB_BUFFER_SERIALIZE_FORMAT_TEXT: a human-readable, plain text format.
 * @HB_BUFFER_SERIALIZE_FORMAT_JSON: a machine-readable JSON format.
 * @HB_BUFFER_SERIALIZE_FORMAT_INVALID: invalid format.
 *
 * The buffer serialization and de-serialization format used in
 * hb_buffer_serialize_glyphs() and hb_buffer_deserialize_glyphs().
 *
 * Since: 0.9.2
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_11 {
    HB_BUFFER_SERIALIZE_FORMAT_TEXT = 1413830740,
    HB_BUFFER_SERIALIZE_FORMAT_JSON = 1246973774,
    HB_BUFFER_SERIALIZE_FORMAT_INVALID = 0,
}
pub use self::_bindgen_ty_11 as hb_buffer_serialize_format_t;
extern "C" {
    pub fn hb_buffer_serialize_format_from_string(str:
                                                      *const ::std::os::raw::c_char,
                                                  len: ::std::os::raw::c_int)
     -> hb_buffer_serialize_format_t;
}
extern "C" {
    pub fn hb_buffer_serialize_format_to_string(format:
                                                    hb_buffer_serialize_format_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn hb_buffer_serialize_list_formats()
     -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn hb_buffer_serialize_glyphs(buffer: *mut hb_buffer_t,
                                      start: ::std::os::raw::c_uint,
                                      end: ::std::os::raw::c_uint,
                                      buf: *mut ::std::os::raw::c_char,
                                      buf_size: ::std::os::raw::c_uint,
                                      buf_consumed:
                                          *mut ::std::os::raw::c_uint,
                                      font: *mut hb_font_t,
                                      format: hb_buffer_serialize_format_t,
                                      flags: hb_buffer_serialize_flags_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_buffer_deserialize_glyphs(buffer: *mut hb_buffer_t,
                                        buf: *const ::std::os::raw::c_char,
                                        buf_len: ::std::os::raw::c_int,
                                        end_ptr:
                                            *mut *const ::std::os::raw::c_char,
                                        font: *mut hb_font_t,
                                        format: hb_buffer_serialize_format_t)
     -> hb_bool_t;
}
pub type hb_buffer_message_func_t =
    ::std::option::Option<unsafe extern "C" fn(buffer: *mut hb_buffer_t,
                                               font: *mut hb_font_t,
                                               message:
                                                   *const ::std::os::raw::c_char,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn hb_buffer_set_message_func(buffer: *mut hb_buffer_t,
                                      func: hb_buffer_message_func_t,
                                      user_data: *mut ::std::os::raw::c_void,
                                      destroy: hb_destroy_func_t);
}
pub type hb_font_get_glyph_func_t =
    ::std::option::Option<unsafe extern "C" fn(font: *mut hb_font_t,
                                               font_data:
                                                   *mut ::std::os::raw::c_void,
                                               unicode: hb_codepoint_t,
                                               variation_selector:
                                                   hb_codepoint_t,
                                               glyph: *mut hb_codepoint_t,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn hb_font_funcs_set_glyph_func(ffuncs: *mut hb_font_funcs_t,
                                        func: hb_font_get_glyph_func_t,
                                        user_data:
                                            *mut ::std::os::raw::c_void,
                                        destroy: hb_destroy_func_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hb_set_t([u8; 0]);
extern "C" {
    pub fn hb_set_create() -> *mut hb_set_t;
}
extern "C" {
    pub fn hb_set_get_empty() -> *mut hb_set_t;
}
extern "C" {
    pub fn hb_set_reference(set: *mut hb_set_t) -> *mut hb_set_t;
}
extern "C" {
    pub fn hb_set_destroy(set: *mut hb_set_t);
}
extern "C" {
    pub fn hb_set_set_user_data(set: *mut hb_set_t,
                                key: *mut hb_user_data_key_t,
                                data: *mut ::std::os::raw::c_void,
                                destroy: hb_destroy_func_t,
                                replace: hb_bool_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_set_get_user_data(set: *mut hb_set_t,
                                key: *mut hb_user_data_key_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hb_set_allocation_successful(set: *const hb_set_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_set_clear(set: *mut hb_set_t);
}
extern "C" {
    pub fn hb_set_is_empty(set: *const hb_set_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_set_has(set: *const hb_set_t, codepoint: hb_codepoint_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_set_add(set: *mut hb_set_t, codepoint: hb_codepoint_t);
}
extern "C" {
    pub fn hb_set_add_range(set: *mut hb_set_t, first: hb_codepoint_t,
                            last: hb_codepoint_t);
}
extern "C" {
    pub fn hb_set_del(set: *mut hb_set_t, codepoint: hb_codepoint_t);
}
extern "C" {
    pub fn hb_set_del_range(set: *mut hb_set_t, first: hb_codepoint_t,
                            last: hb_codepoint_t);
}
extern "C" {
    pub fn hb_set_is_equal(set: *const hb_set_t, other: *const hb_set_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_set_set(set: *mut hb_set_t, other: *const hb_set_t);
}
extern "C" {
    pub fn hb_set_union(set: *mut hb_set_t, other: *const hb_set_t);
}
extern "C" {
    pub fn hb_set_intersect(set: *mut hb_set_t, other: *const hb_set_t);
}
extern "C" {
    pub fn hb_set_subtract(set: *mut hb_set_t, other: *const hb_set_t);
}
extern "C" {
    pub fn hb_set_symmetric_difference(set: *mut hb_set_t,
                                       other: *const hb_set_t);
}
extern "C" {
    pub fn hb_set_invert(set: *mut hb_set_t);
}
extern "C" {
    pub fn hb_set_get_population(set: *const hb_set_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_set_get_min(set: *const hb_set_t) -> hb_codepoint_t;
}
extern "C" {
    pub fn hb_set_get_max(set: *const hb_set_t) -> hb_codepoint_t;
}
extern "C" {
    pub fn hb_set_next(set: *const hb_set_t, codepoint: *mut hb_codepoint_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_set_next_range(set: *const hb_set_t, first: *mut hb_codepoint_t,
                             last: *mut hb_codepoint_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_shape(font: *mut hb_font_t, buffer: *mut hb_buffer_t,
                    features: *const hb_feature_t,
                    num_features: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn hb_shape_full(font: *mut hb_font_t, buffer: *mut hb_buffer_t,
                         features: *const hb_feature_t,
                         num_features: ::std::os::raw::c_uint,
                         shaper_list: *const *const ::std::os::raw::c_char)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_shape_list_shapers() -> *mut *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hb_shape_plan_t([u8; 0]);
extern "C" {
    pub fn hb_shape_plan_create(face: *mut hb_face_t,
                                props: *const hb_segment_properties_t,
                                user_features: *const hb_feature_t,
                                num_user_features: ::std::os::raw::c_uint,
                                shaper_list:
                                    *const *const ::std::os::raw::c_char)
     -> *mut hb_shape_plan_t;
}
extern "C" {
    pub fn hb_shape_plan_create_cached(face: *mut hb_face_t,
                                       props: *const hb_segment_properties_t,
                                       user_features: *const hb_feature_t,
                                       num_user_features:
                                           ::std::os::raw::c_uint,
                                       shaper_list:
                                           *const *const ::std::os::raw::c_char)
     -> *mut hb_shape_plan_t;
}
extern "C" {
    pub fn hb_shape_plan_create2(face: *mut hb_face_t,
                                 props: *const hb_segment_properties_t,
                                 user_features: *const hb_feature_t,
                                 num_user_features: ::std::os::raw::c_uint,
                                 coords: *const ::std::os::raw::c_int,
                                 num_coords: ::std::os::raw::c_uint,
                                 shaper_list:
                                     *const *const ::std::os::raw::c_char)
     -> *mut hb_shape_plan_t;
}
extern "C" {
    pub fn hb_shape_plan_create_cached2(face: *mut hb_face_t,
                                        props: *const hb_segment_properties_t,
                                        user_features: *const hb_feature_t,
                                        num_user_features:
                                            ::std::os::raw::c_uint,
                                        coords: *const ::std::os::raw::c_int,
                                        num_coords: ::std::os::raw::c_uint,
                                        shaper_list:
                                            *const *const ::std::os::raw::c_char)
     -> *mut hb_shape_plan_t;
}
extern "C" {
    pub fn hb_shape_plan_get_empty() -> *mut hb_shape_plan_t;
}
extern "C" {
    pub fn hb_shape_plan_reference(shape_plan: *mut hb_shape_plan_t)
     -> *mut hb_shape_plan_t;
}
extern "C" {
    pub fn hb_shape_plan_destroy(shape_plan: *mut hb_shape_plan_t);
}
extern "C" {
    pub fn hb_shape_plan_set_user_data(shape_plan: *mut hb_shape_plan_t,
                                       key: *mut hb_user_data_key_t,
                                       data: *mut ::std::os::raw::c_void,
                                       destroy: hb_destroy_func_t,
                                       replace: hb_bool_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_shape_plan_get_user_data(shape_plan: *mut hb_shape_plan_t,
                                       key: *mut hb_user_data_key_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hb_shape_plan_execute(shape_plan: *mut hb_shape_plan_t,
                                 font: *mut hb_font_t,
                                 buffer: *mut hb_buffer_t,
                                 features: *const hb_feature_t,
                                 num_features: ::std::os::raw::c_uint)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_shape_plan_get_shaper(shape_plan: *mut hb_shape_plan_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn hb_version(major: *mut ::std::os::raw::c_uint,
                      minor: *mut ::std::os::raw::c_uint,
                      micro: *mut ::std::os::raw::c_uint);
}
extern "C" {
    pub fn hb_version_string() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn hb_version_atleast(major: ::std::os::raw::c_uint,
                              minor: ::std::os::raw::c_uint,
                              micro: ::std::os::raw::c_uint) -> hb_bool_t;
}
extern "C" {
    pub fn hb_ot_font_set_funcs(font: *mut hb_font_t);
}
extern "C" {
    pub fn hb_ot_tags_from_script(script: hb_script_t,
                                  script_tag_1: *mut hb_tag_t,
                                  script_tag_2: *mut hb_tag_t);
}
extern "C" {
    pub fn hb_ot_tag_to_script(tag: hb_tag_t) -> hb_script_t;
}
extern "C" {
    pub fn hb_ot_tag_from_language(language: hb_language_t) -> hb_tag_t;
}
extern "C" {
    pub fn hb_ot_tag_to_language(tag: hb_tag_t) -> hb_language_t;
}
extern "C" {
    pub fn hb_ot_layout_has_glyph_classes(face: *mut hb_face_t) -> hb_bool_t;
}
pub const HB_OT_LAYOUT_GLYPH_CLASS_UNCLASSIFIED: _bindgen_ty_12 =
    _bindgen_ty_12::HB_OT_LAYOUT_GLYPH_CLASS_UNCLASSIFIED;
pub const HB_OT_LAYOUT_GLYPH_CLASS_BASE_GLYPH: _bindgen_ty_12 =
    _bindgen_ty_12::HB_OT_LAYOUT_GLYPH_CLASS_BASE_GLYPH;
pub const HB_OT_LAYOUT_GLYPH_CLASS_LIGATURE: _bindgen_ty_12 =
    _bindgen_ty_12::HB_OT_LAYOUT_GLYPH_CLASS_LIGATURE;
pub const HB_OT_LAYOUT_GLYPH_CLASS_MARK: _bindgen_ty_12 =
    _bindgen_ty_12::HB_OT_LAYOUT_GLYPH_CLASS_MARK;
pub const HB_OT_LAYOUT_GLYPH_CLASS_COMPONENT: _bindgen_ty_12 =
    _bindgen_ty_12::HB_OT_LAYOUT_GLYPH_CLASS_COMPONENT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_12 {
    HB_OT_LAYOUT_GLYPH_CLASS_UNCLASSIFIED = 0,
    HB_OT_LAYOUT_GLYPH_CLASS_BASE_GLYPH = 1,
    HB_OT_LAYOUT_GLYPH_CLASS_LIGATURE = 2,
    HB_OT_LAYOUT_GLYPH_CLASS_MARK = 3,
    HB_OT_LAYOUT_GLYPH_CLASS_COMPONENT = 4,
}
pub use self::_bindgen_ty_12 as hb_ot_layout_glyph_class_t;
extern "C" {
    pub fn hb_ot_layout_get_glyph_class(face: *mut hb_face_t,
                                        glyph: hb_codepoint_t)
     -> hb_ot_layout_glyph_class_t;
}
extern "C" {
    pub fn hb_ot_layout_get_glyphs_in_class(face: *mut hb_face_t,
                                            klass: hb_ot_layout_glyph_class_t,
                                            glyphs: *mut hb_set_t);
}
extern "C" {
    pub fn hb_ot_layout_get_attach_points(face: *mut hb_face_t,
                                          glyph: hb_codepoint_t,
                                          start_offset:
                                              ::std::os::raw::c_uint,
                                          point_count:
                                              *mut ::std::os::raw::c_uint,
                                          point_array:
                                              *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_ot_layout_get_ligature_carets(font: *mut hb_font_t,
                                            direction: hb_direction_t,
                                            glyph: hb_codepoint_t,
                                            start_offset:
                                                ::std::os::raw::c_uint,
                                            caret_count:
                                                *mut ::std::os::raw::c_uint,
                                            caret_array: *mut hb_position_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_ot_layout_table_get_script_tags(face: *mut hb_face_t,
                                              table_tag: hb_tag_t,
                                              start_offset:
                                                  ::std::os::raw::c_uint,
                                              script_count:
                                                  *mut ::std::os::raw::c_uint,
                                              script_tags: *mut hb_tag_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_ot_layout_table_find_script(face: *mut hb_face_t,
                                          table_tag: hb_tag_t,
                                          script_tag: hb_tag_t,
                                          script_index:
                                              *mut ::std::os::raw::c_uint)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_ot_layout_table_choose_script(face: *mut hb_face_t,
                                            table_tag: hb_tag_t,
                                            script_tags: *const hb_tag_t,
                                            script_index:
                                                *mut ::std::os::raw::c_uint,
                                            chosen_script: *mut hb_tag_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_ot_layout_table_get_feature_tags(face: *mut hb_face_t,
                                               table_tag: hb_tag_t,
                                               start_offset:
                                                   ::std::os::raw::c_uint,
                                               feature_count:
                                                   *mut ::std::os::raw::c_uint,
                                               feature_tags: *mut hb_tag_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_ot_layout_script_get_language_tags(face: *mut hb_face_t,
                                                 table_tag: hb_tag_t,
                                                 script_index:
                                                     ::std::os::raw::c_uint,
                                                 start_offset:
                                                     ::std::os::raw::c_uint,
                                                 language_count:
                                                     *mut ::std::os::raw::c_uint,
                                                 language_tags: *mut hb_tag_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_ot_layout_script_find_language(face: *mut hb_face_t,
                                             table_tag: hb_tag_t,
                                             script_index:
                                                 ::std::os::raw::c_uint,
                                             language_tag: hb_tag_t,
                                             language_index:
                                                 *mut ::std::os::raw::c_uint)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_ot_layout_language_get_required_feature_index(face:
                                                                *mut hb_face_t,
                                                            table_tag:
                                                                hb_tag_t,
                                                            script_index:
                                                                ::std::os::raw::c_uint,
                                                            language_index:
                                                                ::std::os::raw::c_uint,
                                                            feature_index:
                                                                *mut ::std::os::raw::c_uint)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_ot_layout_language_get_required_feature(face: *mut hb_face_t,
                                                      table_tag: hb_tag_t,
                                                      script_index:
                                                          ::std::os::raw::c_uint,
                                                      language_index:
                                                          ::std::os::raw::c_uint,
                                                      feature_index:
                                                          *mut ::std::os::raw::c_uint,
                                                      feature_tag:
                                                          *mut hb_tag_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_ot_layout_language_get_feature_indexes(face: *mut hb_face_t,
                                                     table_tag: hb_tag_t,
                                                     script_index:
                                                         ::std::os::raw::c_uint,
                                                     language_index:
                                                         ::std::os::raw::c_uint,
                                                     start_offset:
                                                         ::std::os::raw::c_uint,
                                                     feature_count:
                                                         *mut ::std::os::raw::c_uint,
                                                     feature_indexes:
                                                         *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_ot_layout_language_get_feature_tags(face: *mut hb_face_t,
                                                  table_tag: hb_tag_t,
                                                  script_index:
                                                      ::std::os::raw::c_uint,
                                                  language_index:
                                                      ::std::os::raw::c_uint,
                                                  start_offset:
                                                      ::std::os::raw::c_uint,
                                                  feature_count:
                                                      *mut ::std::os::raw::c_uint,
                                                  feature_tags: *mut hb_tag_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_ot_layout_language_find_feature(face: *mut hb_face_t,
                                              table_tag: hb_tag_t,
                                              script_index:
                                                  ::std::os::raw::c_uint,
                                              language_index:
                                                  ::std::os::raw::c_uint,
                                              feature_tag: hb_tag_t,
                                              feature_index:
                                                  *mut ::std::os::raw::c_uint)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_ot_layout_feature_get_lookups(face: *mut hb_face_t,
                                            table_tag: hb_tag_t,
                                            feature_index:
                                                ::std::os::raw::c_uint,
                                            start_offset:
                                                ::std::os::raw::c_uint,
                                            lookup_count:
                                                *mut ::std::os::raw::c_uint,
                                            lookup_indexes:
                                                *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_ot_layout_table_get_lookup_count(face: *mut hb_face_t,
                                               table_tag: hb_tag_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_ot_layout_collect_lookups(face: *mut hb_face_t,
                                        table_tag: hb_tag_t,
                                        scripts: *const hb_tag_t,
                                        languages: *const hb_tag_t,
                                        features: *const hb_tag_t,
                                        lookup_indexes: *mut hb_set_t);
}
extern "C" {
    pub fn hb_ot_layout_lookup_collect_glyphs(face: *mut hb_face_t,
                                              table_tag: hb_tag_t,
                                              lookup_index:
                                                  ::std::os::raw::c_uint,
                                              glyphs_before: *mut hb_set_t,
                                              glyphs_input: *mut hb_set_t,
                                              glyphs_after: *mut hb_set_t,
                                              glyphs_output: *mut hb_set_t);
}
extern "C" {
    pub fn hb_ot_layout_table_find_feature_variations(face: *mut hb_face_t,
                                                      table_tag: hb_tag_t,
                                                      coords:
                                                          *const ::std::os::raw::c_int,
                                                      num_coords:
                                                          ::std::os::raw::c_uint,
                                                      variations_index:
                                                          *mut ::std::os::raw::c_uint)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_ot_layout_feature_with_variations_get_lookups(face:
                                                                *mut hb_face_t,
                                                            table_tag:
                                                                hb_tag_t,
                                                            feature_index:
                                                                ::std::os::raw::c_uint,
                                                            variations_index:
                                                                ::std::os::raw::c_uint,
                                                            start_offset:
                                                                ::std::os::raw::c_uint,
                                                            lookup_count:
                                                                *mut ::std::os::raw::c_uint,
                                                            lookup_indexes:
                                                                *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_ot_layout_has_substitution(face: *mut hb_face_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_ot_layout_lookup_would_substitute(face: *mut hb_face_t,
                                                lookup_index:
                                                    ::std::os::raw::c_uint,
                                                glyphs: *const hb_codepoint_t,
                                                glyphs_length:
                                                    ::std::os::raw::c_uint,
                                                zero_context: hb_bool_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_ot_layout_lookup_substitute_closure(face: *mut hb_face_t,
                                                  lookup_index:
                                                      ::std::os::raw::c_uint,
                                                  glyphs: *mut hb_set_t);
}
extern "C" {
    pub fn hb_ot_layout_has_positioning(face: *mut hb_face_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_ot_layout_get_size_params(face: *mut hb_face_t,
                                        design_size:
                                            *mut ::std::os::raw::c_uint,
                                        subfamily_id:
                                            *mut ::std::os::raw::c_uint,
                                        subfamily_name_id:
                                            *mut ::std::os::raw::c_uint,
                                        range_start:
                                            *mut ::std::os::raw::c_uint,
                                        range_end:
                                            *mut ::std::os::raw::c_uint)
     -> hb_bool_t;
}
pub const HB_OT_MATH_CONSTANT_SCRIPT_PERCENT_SCALE_DOWN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_SCRIPT_PERCENT_SCALE_DOWN;
pub const HB_OT_MATH_CONSTANT_SCRIPT_SCRIPT_PERCENT_SCALE_DOWN: _bindgen_ty_13
          =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_SCRIPT_SCRIPT_PERCENT_SCALE_DOWN;
pub const HB_OT_MATH_CONSTANT_DELIMITED_SUB_FORMULA_MIN_HEIGHT: _bindgen_ty_13
          =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_DELIMITED_SUB_FORMULA_MIN_HEIGHT;
pub const HB_OT_MATH_CONSTANT_DISPLAY_OPERATOR_MIN_HEIGHT: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_DISPLAY_OPERATOR_MIN_HEIGHT;
pub const HB_OT_MATH_CONSTANT_MATH_LEADING: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_MATH_LEADING;
pub const HB_OT_MATH_CONSTANT_AXIS_HEIGHT: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_AXIS_HEIGHT;
pub const HB_OT_MATH_CONSTANT_ACCENT_BASE_HEIGHT: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_ACCENT_BASE_HEIGHT;
pub const HB_OT_MATH_CONSTANT_FLATTENED_ACCENT_BASE_HEIGHT: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_FLATTENED_ACCENT_BASE_HEIGHT;
pub const HB_OT_MATH_CONSTANT_SUBSCRIPT_SHIFT_DOWN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_SUBSCRIPT_SHIFT_DOWN;
pub const HB_OT_MATH_CONSTANT_SUBSCRIPT_TOP_MAX: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_SUBSCRIPT_TOP_MAX;
pub const HB_OT_MATH_CONSTANT_SUBSCRIPT_BASELINE_DROP_MIN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_SUBSCRIPT_BASELINE_DROP_MIN;
pub const HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP;
pub const HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP_CRAMPED: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP_CRAMPED;
pub const HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MIN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MIN;
pub const HB_OT_MATH_CONSTANT_SUPERSCRIPT_BASELINE_DROP_MAX: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_SUPERSCRIPT_BASELINE_DROP_MAX;
pub const HB_OT_MATH_CONSTANT_SUB_SUPERSCRIPT_GAP_MIN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_SUB_SUPERSCRIPT_GAP_MIN;
pub const HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MAX_WITH_SUBSCRIPT:
          _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MAX_WITH_SUBSCRIPT;
pub const HB_OT_MATH_CONSTANT_SPACE_AFTER_SCRIPT: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_SPACE_AFTER_SCRIPT;
pub const HB_OT_MATH_CONSTANT_UPPER_LIMIT_GAP_MIN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_UPPER_LIMIT_GAP_MIN;
pub const HB_OT_MATH_CONSTANT_UPPER_LIMIT_BASELINE_RISE_MIN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_UPPER_LIMIT_BASELINE_RISE_MIN;
pub const HB_OT_MATH_CONSTANT_LOWER_LIMIT_GAP_MIN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_LOWER_LIMIT_GAP_MIN;
pub const HB_OT_MATH_CONSTANT_LOWER_LIMIT_BASELINE_DROP_MIN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_LOWER_LIMIT_BASELINE_DROP_MIN;
pub const HB_OT_MATH_CONSTANT_STACK_TOP_SHIFT_UP: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_STACK_TOP_SHIFT_UP;
pub const HB_OT_MATH_CONSTANT_STACK_TOP_DISPLAY_STYLE_SHIFT_UP: _bindgen_ty_13
          =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_STACK_TOP_DISPLAY_STYLE_SHIFT_UP;
pub const HB_OT_MATH_CONSTANT_STACK_BOTTOM_SHIFT_DOWN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_STACK_BOTTOM_SHIFT_DOWN;
pub const HB_OT_MATH_CONSTANT_STACK_BOTTOM_DISPLAY_STYLE_SHIFT_DOWN:
          _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_STACK_BOTTOM_DISPLAY_STYLE_SHIFT_DOWN;
pub const HB_OT_MATH_CONSTANT_STACK_GAP_MIN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_STACK_GAP_MIN;
pub const HB_OT_MATH_CONSTANT_STACK_DISPLAY_STYLE_GAP_MIN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_STACK_DISPLAY_STYLE_GAP_MIN;
pub const HB_OT_MATH_CONSTANT_STRETCH_STACK_TOP_SHIFT_UP: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_STRETCH_STACK_TOP_SHIFT_UP;
pub const HB_OT_MATH_CONSTANT_STRETCH_STACK_BOTTOM_SHIFT_DOWN: _bindgen_ty_13
          =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_STRETCH_STACK_BOTTOM_SHIFT_DOWN;
pub const HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_ABOVE_MIN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_ABOVE_MIN;
pub const HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_BELOW_MIN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_BELOW_MIN;
pub const HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_SHIFT_UP: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_SHIFT_UP;
pub const HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_DISPLAY_STYLE_SHIFT_UP:
          _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_DISPLAY_STYLE_SHIFT_UP;
pub const HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_SHIFT_DOWN: _bindgen_ty_13
          =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_SHIFT_DOWN;
pub const HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_DISPLAY_STYLE_SHIFT_DOWN:
          _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_DISPLAY_STYLE_SHIFT_DOWN;
pub const HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_GAP_MIN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_GAP_MIN;
pub const HB_OT_MATH_CONSTANT_FRACTION_NUM_DISPLAY_STYLE_GAP_MIN:
          _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_FRACTION_NUM_DISPLAY_STYLE_GAP_MIN;
pub const HB_OT_MATH_CONSTANT_FRACTION_RULE_THICKNESS: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_FRACTION_RULE_THICKNESS;
pub const HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_GAP_MIN: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_GAP_MIN;
pub const HB_OT_MATH_CONSTANT_FRACTION_DENOM_DISPLAY_STYLE_GAP_MIN:
          _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_FRACTION_DENOM_DISPLAY_STYLE_GAP_MIN;
pub const HB_OT_MATH_CONSTANT_SKEWED_FRACTION_HORIZONTAL_GAP: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_SKEWED_FRACTION_HORIZONTAL_GAP;
pub const HB_OT_MATH_CONSTANT_SKEWED_FRACTION_VERTICAL_GAP: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_SKEWED_FRACTION_VERTICAL_GAP;
pub const HB_OT_MATH_CONSTANT_OVERBAR_VERTICAL_GAP: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_OVERBAR_VERTICAL_GAP;
pub const HB_OT_MATH_CONSTANT_OVERBAR_RULE_THICKNESS: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_OVERBAR_RULE_THICKNESS;
pub const HB_OT_MATH_CONSTANT_OVERBAR_EXTRA_ASCENDER: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_OVERBAR_EXTRA_ASCENDER;
pub const HB_OT_MATH_CONSTANT_UNDERBAR_VERTICAL_GAP: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_UNDERBAR_VERTICAL_GAP;
pub const HB_OT_MATH_CONSTANT_UNDERBAR_RULE_THICKNESS: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_UNDERBAR_RULE_THICKNESS;
pub const HB_OT_MATH_CONSTANT_UNDERBAR_EXTRA_DESCENDER: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_UNDERBAR_EXTRA_DESCENDER;
pub const HB_OT_MATH_CONSTANT_RADICAL_VERTICAL_GAP: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_RADICAL_VERTICAL_GAP;
pub const HB_OT_MATH_CONSTANT_RADICAL_DISPLAY_STYLE_VERTICAL_GAP:
          _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_RADICAL_DISPLAY_STYLE_VERTICAL_GAP;
pub const HB_OT_MATH_CONSTANT_RADICAL_RULE_THICKNESS: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_RADICAL_RULE_THICKNESS;
pub const HB_OT_MATH_CONSTANT_RADICAL_EXTRA_ASCENDER: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_RADICAL_EXTRA_ASCENDER;
pub const HB_OT_MATH_CONSTANT_RADICAL_KERN_BEFORE_DEGREE: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_RADICAL_KERN_BEFORE_DEGREE;
pub const HB_OT_MATH_CONSTANT_RADICAL_KERN_AFTER_DEGREE: _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_RADICAL_KERN_AFTER_DEGREE;
pub const HB_OT_MATH_CONSTANT_RADICAL_DEGREE_BOTTOM_RAISE_PERCENT:
          _bindgen_ty_13 =
    _bindgen_ty_13::HB_OT_MATH_CONSTANT_RADICAL_DEGREE_BOTTOM_RAISE_PERCENT;
#[repr(u32)]
/**
 * hb_ot_math_constant_t:
 *
 * Since: 1.3.3
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_13 {
    HB_OT_MATH_CONSTANT_SCRIPT_PERCENT_SCALE_DOWN = 0,
    HB_OT_MATH_CONSTANT_SCRIPT_SCRIPT_PERCENT_SCALE_DOWN = 1,
    HB_OT_MATH_CONSTANT_DELIMITED_SUB_FORMULA_MIN_HEIGHT = 2,
    HB_OT_MATH_CONSTANT_DISPLAY_OPERATOR_MIN_HEIGHT = 3,
    HB_OT_MATH_CONSTANT_MATH_LEADING = 4,
    HB_OT_MATH_CONSTANT_AXIS_HEIGHT = 5,
    HB_OT_MATH_CONSTANT_ACCENT_BASE_HEIGHT = 6,
    HB_OT_MATH_CONSTANT_FLATTENED_ACCENT_BASE_HEIGHT = 7,
    HB_OT_MATH_CONSTANT_SUBSCRIPT_SHIFT_DOWN = 8,
    HB_OT_MATH_CONSTANT_SUBSCRIPT_TOP_MAX = 9,
    HB_OT_MATH_CONSTANT_SUBSCRIPT_BASELINE_DROP_MIN = 10,
    HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP = 11,
    HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP_CRAMPED = 12,
    HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MIN = 13,
    HB_OT_MATH_CONSTANT_SUPERSCRIPT_BASELINE_DROP_MAX = 14,
    HB_OT_MATH_CONSTANT_SUB_SUPERSCRIPT_GAP_MIN = 15,
    HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MAX_WITH_SUBSCRIPT = 16,
    HB_OT_MATH_CONSTANT_SPACE_AFTER_SCRIPT = 17,
    HB_OT_MATH_CONSTANT_UPPER_LIMIT_GAP_MIN = 18,
    HB_OT_MATH_CONSTANT_UPPER_LIMIT_BASELINE_RISE_MIN = 19,
    HB_OT_MATH_CONSTANT_LOWER_LIMIT_GAP_MIN = 20,
    HB_OT_MATH_CONSTANT_LOWER_LIMIT_BASELINE_DROP_MIN = 21,
    HB_OT_MATH_CONSTANT_STACK_TOP_SHIFT_UP = 22,
    HB_OT_MATH_CONSTANT_STACK_TOP_DISPLAY_STYLE_SHIFT_UP = 23,
    HB_OT_MATH_CONSTANT_STACK_BOTTOM_SHIFT_DOWN = 24,
    HB_OT_MATH_CONSTANT_STACK_BOTTOM_DISPLAY_STYLE_SHIFT_DOWN = 25,
    HB_OT_MATH_CONSTANT_STACK_GAP_MIN = 26,
    HB_OT_MATH_CONSTANT_STACK_DISPLAY_STYLE_GAP_MIN = 27,
    HB_OT_MATH_CONSTANT_STRETCH_STACK_TOP_SHIFT_UP = 28,
    HB_OT_MATH_CONSTANT_STRETCH_STACK_BOTTOM_SHIFT_DOWN = 29,
    HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_ABOVE_MIN = 30,
    HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_BELOW_MIN = 31,
    HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_SHIFT_UP = 32,
    HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_DISPLAY_STYLE_SHIFT_UP = 33,
    HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_SHIFT_DOWN = 34,
    HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_DISPLAY_STYLE_SHIFT_DOWN = 35,
    HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_GAP_MIN = 36,
    HB_OT_MATH_CONSTANT_FRACTION_NUM_DISPLAY_STYLE_GAP_MIN = 37,
    HB_OT_MATH_CONSTANT_FRACTION_RULE_THICKNESS = 38,
    HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_GAP_MIN = 39,
    HB_OT_MATH_CONSTANT_FRACTION_DENOM_DISPLAY_STYLE_GAP_MIN = 40,
    HB_OT_MATH_CONSTANT_SKEWED_FRACTION_HORIZONTAL_GAP = 41,
    HB_OT_MATH_CONSTANT_SKEWED_FRACTION_VERTICAL_GAP = 42,
    HB_OT_MATH_CONSTANT_OVERBAR_VERTICAL_GAP = 43,
    HB_OT_MATH_CONSTANT_OVERBAR_RULE_THICKNESS = 44,
    HB_OT_MATH_CONSTANT_OVERBAR_EXTRA_ASCENDER = 45,
    HB_OT_MATH_CONSTANT_UNDERBAR_VERTICAL_GAP = 46,
    HB_OT_MATH_CONSTANT_UNDERBAR_RULE_THICKNESS = 47,
    HB_OT_MATH_CONSTANT_UNDERBAR_EXTRA_DESCENDER = 48,
    HB_OT_MATH_CONSTANT_RADICAL_VERTICAL_GAP = 49,
    HB_OT_MATH_CONSTANT_RADICAL_DISPLAY_STYLE_VERTICAL_GAP = 50,
    HB_OT_MATH_CONSTANT_RADICAL_RULE_THICKNESS = 51,
    HB_OT_MATH_CONSTANT_RADICAL_EXTRA_ASCENDER = 52,
    HB_OT_MATH_CONSTANT_RADICAL_KERN_BEFORE_DEGREE = 53,
    HB_OT_MATH_CONSTANT_RADICAL_KERN_AFTER_DEGREE = 54,
    HB_OT_MATH_CONSTANT_RADICAL_DEGREE_BOTTOM_RAISE_PERCENT = 55,
}
pub use self::_bindgen_ty_13 as hb_ot_math_constant_t;
pub const HB_OT_MATH_KERN_TOP_RIGHT: _bindgen_ty_14 =
    _bindgen_ty_14::HB_OT_MATH_KERN_TOP_RIGHT;
pub const HB_OT_MATH_KERN_TOP_LEFT: _bindgen_ty_14 =
    _bindgen_ty_14::HB_OT_MATH_KERN_TOP_LEFT;
pub const HB_OT_MATH_KERN_BOTTOM_RIGHT: _bindgen_ty_14 =
    _bindgen_ty_14::HB_OT_MATH_KERN_BOTTOM_RIGHT;
pub const HB_OT_MATH_KERN_BOTTOM_LEFT: _bindgen_ty_14 =
    _bindgen_ty_14::HB_OT_MATH_KERN_BOTTOM_LEFT;
#[repr(u32)]
/**
 * hb_ot_math_kern_t:
 *
 * Since: 1.3.3
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_14 {
    HB_OT_MATH_KERN_TOP_RIGHT = 0,
    HB_OT_MATH_KERN_TOP_LEFT = 1,
    HB_OT_MATH_KERN_BOTTOM_RIGHT = 2,
    HB_OT_MATH_KERN_BOTTOM_LEFT = 3,
}
pub use self::_bindgen_ty_14 as hb_ot_math_kern_t;
/**
 * hb_ot_math_glyph_variant_t:
 *
 * Since: 1.3.3
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hb_ot_math_glyph_variant_t {
    pub glyph: hb_codepoint_t,
    pub advance: hb_position_t,
}
#[test]
fn bindgen_test_layout_hb_ot_math_glyph_variant_t() {
    assert_eq!(::std::mem::size_of::<hb_ot_math_glyph_variant_t>() , 8usize);
    assert_eq!(::std::mem::align_of::<hb_ot_math_glyph_variant_t>() , 4usize);
}
impl Clone for hb_ot_math_glyph_variant_t {
    fn clone(&self) -> Self { *self }
}
pub const HB_MATH_GLYPH_PART_FLAG_NONE: _bindgen_ty_15 =
    _bindgen_ty_15::HB_MATH_GLYPH_PART_FLAG_NONE;
pub const HB_MATH_GLYPH_PART_FLAG_EXTENDER: _bindgen_ty_15 =
    _bindgen_ty_15::HB_MATH_GLYPH_PART_FLAG_EXTENDER;
#[repr(u32)]
/**
 * hb_ot_math_glyph_part_flags_t:
 *
 * Since: 1.3.3
 */
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_15 {
    HB_MATH_GLYPH_PART_FLAG_NONE = 0,
    HB_MATH_GLYPH_PART_FLAG_EXTENDER = 1,
}
pub use self::_bindgen_ty_15 as hb_ot_math_glyph_part_flags_t;
/**
 * hb_ot_math_glyph_part_t:
 *
 * Since: 1.3.3
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hb_ot_math_glyph_part_t {
    pub glyph: hb_codepoint_t,
    pub start_connector_length: hb_position_t,
    pub end_connector_length: hb_position_t,
    pub full_advance: hb_position_t,
    pub flags: hb_ot_math_glyph_part_flags_t,
}
#[test]
fn bindgen_test_layout_hb_ot_math_glyph_part_t() {
    assert_eq!(::std::mem::size_of::<hb_ot_math_glyph_part_t>() , 20usize);
    assert_eq!(::std::mem::align_of::<hb_ot_math_glyph_part_t>() , 4usize);
}
impl Clone for hb_ot_math_glyph_part_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn hb_ot_math_has_data(face: *mut hb_face_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_ot_math_get_constant(font: *mut hb_font_t,
                                   constant: hb_ot_math_constant_t)
     -> hb_position_t;
}
extern "C" {
    pub fn hb_ot_math_get_glyph_italics_correction(font: *mut hb_font_t,
                                                   glyph: hb_codepoint_t)
     -> hb_position_t;
}
extern "C" {
    pub fn hb_ot_math_get_glyph_top_accent_attachment(font: *mut hb_font_t,
                                                      glyph: hb_codepoint_t)
     -> hb_position_t;
}
extern "C" {
    pub fn hb_ot_math_is_glyph_extended_shape(face: *mut hb_face_t,
                                              glyph: hb_codepoint_t)
     -> hb_bool_t;
}
extern "C" {
    pub fn hb_ot_math_get_glyph_kerning(font: *mut hb_font_t,
                                        glyph: hb_codepoint_t,
                                        kern: hb_ot_math_kern_t,
                                        correction_height: hb_position_t)
     -> hb_position_t;
}
extern "C" {
    pub fn hb_ot_math_get_glyph_variants(font: *mut hb_font_t,
                                         glyph: hb_codepoint_t,
                                         direction: hb_direction_t,
                                         start_offset: ::std::os::raw::c_uint,
                                         variants_count:
                                             *mut ::std::os::raw::c_uint,
                                         variants:
                                             *mut hb_ot_math_glyph_variant_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_ot_math_get_min_connector_overlap(font: *mut hb_font_t,
                                                direction: hb_direction_t)
     -> hb_position_t;
}
extern "C" {
    pub fn hb_ot_math_get_glyph_assembly(font: *mut hb_font_t,
                                         glyph: hb_codepoint_t,
                                         direction: hb_direction_t,
                                         start_offset: ::std::os::raw::c_uint,
                                         parts_count:
                                             *mut ::std::os::raw::c_uint,
                                         parts: *mut hb_ot_math_glyph_part_t,
                                         italics_correction:
                                             *mut hb_position_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_ot_shape_glyphs_closure(font: *mut hb_font_t,
                                      buffer: *mut hb_buffer_t,
                                      features: *const hb_feature_t,
                                      num_features: ::std::os::raw::c_uint,
                                      glyphs: *mut hb_set_t);
}
extern "C" {
    pub fn hb_ot_shape_plan_collect_lookups(shape_plan: *mut hb_shape_plan_t,
                                            table_tag: hb_tag_t,
                                            lookup_indexes: *mut hb_set_t);
}
/**
 * hb_ot_var_axis_t:
 *
 * Since: 1.4.2
 */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct hb_ot_var_axis_t {
    pub tag: hb_tag_t,
    pub name_id: ::std::os::raw::c_uint,
    pub min_value: f32,
    pub default_value: f32,
    pub max_value: f32,
}
#[test]
fn bindgen_test_layout_hb_ot_var_axis_t() {
    assert_eq!(::std::mem::size_of::<hb_ot_var_axis_t>() , 20usize);
    assert_eq!(::std::mem::align_of::<hb_ot_var_axis_t>() , 4usize);
}
impl Clone for hb_ot_var_axis_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn hb_ot_var_has_data(face: *mut hb_face_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_ot_var_get_axis_count(face: *mut hb_face_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_ot_var_get_axes(face: *mut hb_face_t,
                              start_offset: ::std::os::raw::c_uint,
                              axes_count: *mut ::std::os::raw::c_uint,
                              axes_array: *mut hb_ot_var_axis_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn hb_ot_var_find_axis(face: *mut hb_face_t, axis_tag: hb_tag_t,
                               axis_index: *mut ::std::os::raw::c_uint,
                               axis_info: *mut hb_ot_var_axis_t) -> hb_bool_t;
}
extern "C" {
    pub fn hb_ot_var_normalize_variations(face: *mut hb_face_t,
                                          variations: *const hb_variation_t,
                                          variations_length:
                                              ::std::os::raw::c_uint,
                                          coords: *mut ::std::os::raw::c_int,
                                          coords_length:
                                              ::std::os::raw::c_uint);
}
extern "C" {
    pub fn hb_ot_var_normalize_coords(face: *mut hb_face_t,
                                      coords_length: ::std::os::raw::c_uint,
                                      design_coords: *const f32,
                                      normalized_coords:
                                          *mut ::std::os::raw::c_int);
}
